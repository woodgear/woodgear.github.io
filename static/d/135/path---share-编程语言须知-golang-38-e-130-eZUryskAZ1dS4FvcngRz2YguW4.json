{"data":{"markdownRemark":{"html":"<h1>import-package</h1>\n<ol>\n<li>每个文件中必须指明自己所属的包</li>\n<li>每个文件夹下只能有一个包</li>\n<li>import 语句 <code class=\"language-text\">m &quot;test-golang/foo&quot;</code> 绝对路径 <code class=\"language-text\">test-golang</code>之总的包名 在go.mod中定义 <code class=\"language-text\">/foo</code>是文件夹名 与包名无关 <code class=\"language-text\">m</code> 是此文件夹中存在的包的别名</li>\n<li>\n<p>同一文件夹中(同一包)的不同文件中定义的符号 互相可见   </p>\n<h1>忽略unused xx 报警</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">go run -gcflags <span class=\"token string\">'-unused_pkgs -unused_vars'</span> xx.go </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>dependency 依赖</h1>\n<p>go mod init xxx (you moudle path),所以一个正常的go的目录结构是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">you-project-dir\nyou-moude-dir\n    main.go\ngo.mod</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>go.mod 作用类似于package.json或者carg.yaml</p>\n</li>\n</ol>\n<h1>test <a href=\"https://golang.org/pkg/testing/\">test</a></h1>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> xxx\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"testing\"</span>\n\t<span class=\"token string\">\"github.com/stretchr/testify/assert\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestXXXX</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>文件名必须以_test 结尾</p>\n<p><code class=\"language-text\">go test xxx</code> xxx是文件夹名字 可以用正则 <code class=\"language-text\">go test ./controller/*</code>\n<code class=\"language-text\">go test xx -run TEST_NAME</code> 只测试特定的函数 只测试特定的函数 </p>\n<h2>变量定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    var a = &quot;initial&quot;\n    fmt.Println(a)\n\n    var b, c int = 1, 2\n    fmt.Println(b, c)\n\n    var d = true\n    fmt.Println(d)\n\n    var e int\n    fmt.Println(e)\n\n    f := &quot;apple&quot;\n    fmt.Println(f)\n}\n/*\n go run variables.go\ninitial\n1 2\ntrue\n0\napple\n*/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>control statement</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    if 7%2 == 0 {\n        fmt.Println(&quot;7 is even&quot;)\n    } else {\n        fmt.Println(&quot;7 is odd&quot;)\n    }\n\n    if 8%4 == 0 {\n        fmt.Println(&quot;8 is divisible by 4&quot;)\n    }\n\n    if num := 9; num &lt; 0 {\n        fmt.Println(num, &quot;is negative&quot;)\n    } else if num &lt; 10 {\n        fmt.Println(num, &quot;has 1 digit&quot;)\n    } else {\n        fmt.Println(num, &quot;has multiple digits&quot;)\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>function-define</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">func FUNC_NAME(ARG1 ARG1_TYPE,ARG2 ARG2_TYPE) RET_TYPE {\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>string-fmt</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">title := fmt.Sprintf(&quot;已采集%d个药草, 还需要%d个完成任务&quot;, progress, target)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>容器</h2>\n<h3>list</h3>\n<h4>push</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tvar s []int\n\tprintSlice(s)\n\n\t// append works on nil slices.\n\ts = append(s, 0)\n\tprintSlice(s)\n\n\t// The slice grows as needed.\n\ts = append(s, 1)\n\tprintSlice(s)\n\n\t// We can add more than one element at a time.\n\ts = append(s, 2, 3, 4)\n\tprintSlice(s)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>interface</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type INTERFACE_NAME interface {\n    FUNC_NAME(ARG) RET_TYPE\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>impl-interface</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\ntype Barkble interface {\n\tbark() string\n}\n\nfunc cal(b Barkble) {\n\tfmt.Printf(b.bark())\n}\n\ntype Dog1 struct {\n\tname string\n}\n\nfunc NewDog1() *Dog1 {\n\treturn &amp;Dog1{name: &quot;A&quot;}\n}\nfunc (d *Dog1) bark() string {\n\treturn d.name\n}\n\ntype Dog2 struct {\n\tname string\n}\n\nfunc NewDog2() *Dog2 {\n\treturn &amp;Dog2{name: &quot;B&quot;}\n}\nfunc (d *Dog2) bark() string {\n\treturn d.name\n}\n\nfunc main() {\n\tcal(NewDog1())\n\tcal(NewDog2())\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>struct</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type STRUCT_NAME struct {\n    FIELD_NAME FIELD_TYPE,\n    FIELD_NAME FIELD_TYPE,\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>construct-struct</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type Dog1 struct {\n\tname string\n}\nfunc a() {\n    d := Dog1 {\n        name:&quot;2&quot;}\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>要注意的是如果没有逗号，则}不能另起新行，否则会报错</p>\n<h1>statement</h1>\n<h2>select</h2>\n<h3>loop</h3>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<h2>iterator</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">a := []string{&quot;Foo&quot;, &quot;Bar&quot;}\nfor i, s := range a {\n    fmt.Println(i, s)\n}\nm := map[string]int{\n    &quot;one&quot;:   1,\n    &quot;two&quot;:   2,\n    &quot;three&quot;: 3,\n}\nfor k, v := range m {\n    fmt.Println(k, v)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>common-container</h1>\n<h2>list</h2>\n<h2>array</h2>\n<h2>quque</h2>\n<h2>map</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\ntype A struct {\n\tm map[uint64]uint64\n}\n\nfunc main() {\n\tfmt.Println(&quot;Hello, playground&quot;)\n\ta := new(A)\n\ta.m = make(map[uint64]uint64)\n\ta.m[1] = 2\n\tfmt.Printf(&quot;%v&quot;, a)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言须知/golang/"}}