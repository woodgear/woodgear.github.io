{"data":{"markdownRemark":{"html":"<h1>function declare</h1>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>class</h1>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// instance variable</span>\n  <span class=\"token keyword\">public</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// construct/new etc</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>enum</h1>\n<h2>l-enum-string</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n  Up <span class=\"token operator\">=</span> <span class=\"token string\">\"UP\"</span><span class=\"token punctuation\">,</span>\n  Down <span class=\"token operator\">=</span> <span class=\"token string\">\"DOWN\"</span><span class=\"token punctuation\">,</span>\n  Left <span class=\"token operator\">=</span> <span class=\"token string\">\"LEFT\"</span><span class=\"token punctuation\">,</span>\n  Right <span class=\"token operator\">=</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>从枚举值中获取其字符串表示\n<a href=\"http://geekswithblogs.net/PhubarBaz/archive/2013/11/25/typescript-enums-to-string.aspx\">typescript-enums-to-string</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Numbers <span class=\"token punctuation\">{</span>\n  zero<span class=\"token punctuation\">,</span>\n  one<span class=\"token punctuation\">,</span>\n  two<span class=\"token punctuation\">,</span>\n  three<span class=\"token punctuation\">,</span>\n  four<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> myNumber <span class=\"token operator\">=</span> Numbers<span class=\"token punctuation\">.</span>two<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> twoAsString <span class=\"token operator\">=</span> Numbers<span class=\"token punctuation\">[</span>myNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// twoAsString == \"two\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?#code/KYOwrgtgBAcpBGwBOBnKBvKAvZB7ANFLiMIQC4DuBUZAFksKVAGa5hJQC+AUAG4CGHCAE84ERBwC8sBMhQA6SrgDcfQTSoBBFAGUySAJYgA5lGliJKANoiLyALrKoAemcbc2vYZNnpAIiU-bgBjYhRcABtgeQjcYwAKJU99I2MASiA\">ts-playground</a></p>\n<h1>l-interface</h1>\n<p><a href=\"https://www.tslang.cn/docs/handbook/generics.html\">https://www.tslang.cn/docs/handbook/generics.html</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> identity<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token punctuation\">:</span> GenericIdentityFn <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> identity<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token punctuation\">:</span> GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-var-define-array</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">let a :Array&lt;number&gt;  = [1,2,3]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">https://www.typescriptlang.org/docs/handbook/basic-types.html</a></p>\n<h1>l-array-index</h1>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\">array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span> begin <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取倒数两个元素</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>l-construct-map-from-array</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<p><a href=\"https://www.tutorialspoint.com/typescript/typescript_array_slice.htm\">https://www.tutorialspoint.com/typescript/typescript<em>array</em>slice.htm</a></p>\n<h1>l-type-define</h1>\n<h2>map index-signature</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>lambda</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IParam</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-function</h1>\n<h2>l-function-default-argument</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>l-type-option-argument</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-language-formal-define</h2>\n<p>Ts 看起来并没有实时维护的语法定义</p>\n<h2>l-concept-option-method</h2>\n<p>通过 merge interface 实现\n<a href=\"https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method/44154690\">https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method/44154690</a></p>\n<h2>l-constructor-assignment</h2>\n<p>即通过构造器给类的属性赋值的能力</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> city</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compiler error: Property 'name' does not exist on type 'TestClass'.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> testClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jane Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123 Main St.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cityville\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntestClass<span class=\"token punctuation\">.</span><span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testClass<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compiler error: Property 'name' does not exist on type 'TestClass'.</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testClass<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compiler error: 'address' is private and only accessible within class 'TestClass'.</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testClass<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-type-cast</h1>\n<p>已某种方式我们能够手动的指定类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>l-type-guard</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isFish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pet<span class=\"token punctuation\">:</span> Fish <span class=\"token operator\">|</span> Bird</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> pet <span class=\"token keyword\">is</span> Fish <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>pet <span class=\"token keyword\">as</span> Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>swim <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>l-export</h1>\n<p>export 本质是暴露不同的命名空间,模块系统的一部分</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token comment\">// a.ts start</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// default export</span>\n<span class=\"token comment\">// a.ts end</span>\n<span class=\"token comment\">// b.ts start</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> allA <span class=\"token keyword\">from</span> <span class=\"token string\">\"a.ts\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allA.a = 10</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"a.ts\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a=10</span>\n<span class=\"token keyword\">import</span> v <span class=\"token keyword\">from</span> <span class=\"token string\">\"a.ts\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// v=10  For default exports the name does not matter. When importing the client code can specify whatever name they want for the import</span>\n<span class=\"token comment\">// b.ts end</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-import-and-export-rename</h2>\n<h2>l-cycle-dependency</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g dpdm\ndpdm</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>","fields":{"slug":"/要素/编程语言要素/ts/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"39szixm","time":"2020-01-13T09:56:23+08:00","tag":null},"parent":{"__typename":"File","name":"ts","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-12-16T06:38:56.023Z","relativeDirectory":"要素/编程语言要素","absolutePath":"/home/oaa/ns/share/blog/要素/编程语言要素/ts.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/要素/编程语言要素/ts/","disqus":{"shortname":"woodgear-blog"}}}