{"data":{"markdownRemark":{"html":"<h1>Cell</h1>\n<h2>Cell是什么东西</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[repr(transparent)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Cell<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> ?Sized<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> UnsafeCell<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Cell<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Cell<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        Cell <span class=\"token punctuation\">{</span>\n            value<span class=\"token punctuation\">:</span> UnsafeCell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> old <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Cell的set方法只要求拥有不可变的reference 这就是她最大的作用</p>\n<h2>有什么用 或者说在实际的例子中人们是怎么使用Cell的</h2>\n<h3>假设我们希望不用mut ref 一个struct 来mut一个struct</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Cell<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> SomeStruct <span class=\"token punctuation\">{</span>\n    regular_field<span class=\"token punctuation\">:</span> u8<span class=\"token punctuation\">,</span>\n    special_field<span class=\"token punctuation\">:</span> Cell<span class=\"token operator\">&lt;</span>u8<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> my_struct <span class=\"token operator\">=</span> SomeStruct <span class=\"token punctuation\">{</span>\n    regular_field<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    special_field<span class=\"token punctuation\">:</span> Cell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> new_value <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ERROR, because my_struct is immutable</span>\n<span class=\"token comment\">// my_struct.regular_field = new_value;</span>\n\n<span class=\"token comment\">// WORKS, although `my_struct` is immutable, field `special_field` is mutable because it is Cell</span>\nmy_struct<span class=\"token punctuation\">.</span>special_field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span>my_struct<span class=\"token punctuation\">.</span>special_field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>希望做一些兼容性的操作</h3>\n<p>or because you must employ mutation to implement a trait method that was originally defined to take &#x26;self.</p>\n<h3>偷偷的进行mut 理论上不用mut的地方在实现上需要mut</h3>\n<ol>\n<li>\n<p>例如实现memorize 每次只是get(&#x26;self) 但实际上要修改缓存(&#x26;mut self)</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>cell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>RefCell<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n</ol>\n<p>struct Graph {\nedges: Vec&#x3C;(i32, i32)>,\nspan<em>tree</em>cache: RefCell&#x3C;Option&#x3C;Vec&#x3C;(i32, i32)>>>\n}</p>\n<p>impl Graph {\nfn minimum<em>spanning</em>tree(&#x26;self) -> Vec&#x3C;(i32, i32)> {\n// Create a new scope to contain the lifetime of the\n// dynamic borrow\n{\n// Take a reference to the inside of cache cell\nlet mut cache = self.span<em>tree</em>cache.borrow<em>mut();\nif cache.is</em>some() {\nreturn cache.as_ref().unwrap().clone();\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">        let span_tree = self.calc_span_tree();\n        *cache = Some(span_tree);\n    }\n\n    // Recursive call to return the just-cached value.\n    // Note that if we had not let the previous borrow\n    // of the cache fall out of scope then the subsequent\n    // recursive borrow would cause a dynamic thread panic.\n    // This is the major hazard of using `RefCell`.\n    self.minimum_spanning_tree()\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">2. 例如引用计数在clone(&amp;self)时要增加count(&amp;mut self)\n```rust\n#![feature(core_intrinsics)]\nuse std::cell::Cell;\nuse std::ptr::NonNull;\nuse std::intrinsics::abort;\n\nstruct Rc&lt;T: ?Sized&gt; {\n    ptr: NonNull&lt;RcBox&lt;T&gt;&gt;\n}\n\nstruct RcBox&lt;T: ?Sized&gt; {\n    strong: Cell&lt;usize&gt;,\n    refcount: Cell&lt;usize&gt;,\n    value: T,\n}\n\nimpl&lt;T: ?Sized&gt; Clone for Rc&lt;T&gt; {\n    fn clone(&amp;self) -&gt; Rc&lt;T&gt; {\n        self.inc_strong();\n        Rc { ptr: self.ptr }\n    }\n}\n\ntrait RcBoxPtr&lt;T: ?Sized&gt; {\n\n    fn inner(&amp;self) -&gt; &amp;RcBox&lt;T&gt;;\n\n    fn strong(&amp;self) -&gt; usize {\n        self.inner().strong.get()\n    }\n\n    fn inc_strong(&amp;self) {\n        self.inner()\n            .strong\n            .set(self.strong()\n                     .checked_add(1)\n                     .unwrap_or_else(|| unsafe { abort() }));\n    }\n}\n\nimpl&lt;T: ?Sized&gt; RcBoxPtr&lt;T&gt; for Rc&lt;T&gt; {\n   fn inner(&amp;self) -&gt; &amp;RcBox&lt;T&gt; {\n       unsafe {\n           self.ptr.as_ref()\n       }\n   }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>当我们有某个共有的变量 同时有多个struct希望能够修改她</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> A<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> i32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> A<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">change_to</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">:</span> i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> a <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> b <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">change_to</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// b.change_to(1);</span>\n    <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use std::cell::Cell;</span>\n\n<span class=\"token comment\">// struct A&lt;'a>(&amp;'a Cell::&lt;i32>);</span>\n\n<span class=\"token comment\">// impl&lt;'a> A&lt;'a> {</span>\n<span class=\"token comment\">//     fn change_to(&amp;self,v:i32){</span>\n<span class=\"token comment\">//         self.0.set(v);</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// fn main() {</span>\n<span class=\"token comment\">//     let x = Cell::new(10);</span>\n<span class=\"token comment\">//     let a = A(&amp;x);</span>\n<span class=\"token comment\">//     let b = A(&amp;x);</span>\n<span class=\"token comment\">//     b.change_to(1);</span>\n<span class=\"token comment\">//     a.change_to(2);</span>\n<span class=\"token comment\">//     println!(\"{:?}\",x);</span>\n<span class=\"token comment\">// }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>RefCell</h1>","fields":{"slug":"/share/编程语言要素/rust/cell/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"vmfosh2","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"cell","ext":".md","birthTime":"2020-08-12T15:37:07.077Z","changeTime":"2020-08-12T17:06:51.097Z","relativeDirectory":"share/编程语言要素/rust","absolutePath":"/home/oaa/temp/blog/share/编程语言要素/rust/cell.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言要素/rust/cell/","disqus":{"shortname":"woodgear-blog"}}}