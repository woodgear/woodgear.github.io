{"data":{"markdownRemark":{"html":"<h1>流程</h1>\n<h2>legacy</h2>\n<blockquote>\n<ol>\n<li>BIOS加电自检（Power On Self Test -- POST）。</li>\n<li>读取主引导记录（MBR）。BIOS根据CMOS中的设置依次检查启动设备：将相应启动设备的第一个扇区（也就是MBR扇区）读入内存。\n检查MBR的结束标志位是否等于55AAH，若不等于则转去尝试其他启动设备，如果没有启动设备满足要求则显示\"NO ROM BASIC\"然后死机。</li>\n<li>当检测到有启动设备满足要求后，BIOS将控制权交给相应启动设备的MBR。\n根据MBR中的引导代码启动引导程序。</li>\n</ol>\n</blockquote>\n<h2>实验</h2>\n<h3>如何知道一个磁盘是否为可引导磁盘?</h3>\n<h3>多个硬盘 如何知道哪一个是当前使用的引导盘</h3>\n<h3>MBR和GPT是什么 区别是什么</h3>\n<p>MBR和GPT都是分区解决方案\n分区是磁盘的逻辑组成概念\n假设对于磁盘的理解为一个大数组 分区则给予了拆分这个大数组的能够 文件系统建立在分区上 不同分区可以装不同的文件系统\n为了维护分区 分区的metainfo也是存在磁盘上需要有方法格式来设定\n即为MBR和GPT\n此外系统加载时操作系统的bootloader也是存在操作系统上的 如何boot操作系统的逻辑也是由MBR和GPT负责的</p>\n<p>MBR是分区与引导方案的集合</p>\n<p>标识一个分区 MBR使用16字节 4字节起始扇区 + 4字节扇区大小\n分区最大2^32*512/1024/1024/1024=2048 2T\n标识磁盘最大4T</p>\n<h1>MBR格式</h1>\n<p>固定512byte大小 包含bootloader代码和分区表 分区表固定大小64byte 分区项固定大小16byte 通过4字节起始扇区和4字节扇区大小标识分区\nMBR中\tCHS First address 和 CHS Last address 应当是冗余的</p>\n<h1>GPT格式</h1>\n<p>思路上设定就不一样 MBR在512byte中完整的表达中了所有分区的信息(不算额外分区)\nGPT到更类似于指针在LBA1(GPT分区表头)中存放着分区的数量和分区项的大小,在后面是分区项 分区项结束后是真正的分区数据\n在最后还有一个备份的GPT分区表\n分区表 不固定大小\n分区项由表头指定大小 一般128byte 通过8字节起始扇区和8字节结束扇区标识分区</p>\n<h1>如何确认一块磁盘是否是GPT分区</h1>\n<p>GPT表头有magicnumber</p>\n<h1>对于一块磁盘的概念划分</h1>\n<ol>\n<li>硬件属性</li>\n<li>\n<p>软件属性</p>\n<ol>\n<li>分区信息</li>\n<li>建立在分区上的文件系统信息</li>\n</ol>\n</li>\n</ol>\n<h1>UEFI</h1>\n<h1>GRUB2</h1>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-it-work/bootloader/"}}