{"data":{"markdownRemark":{"html":"<h1>什么是future</h1>\n<p>就我目前的理解来看future是一种新型的书写方式 传统的代码按照线性顺序执行 但是在异步程序中为了表明异步逻辑 最简单的就是嵌套回调 future也是类似 只不过是通过and_then等方法将异步逻辑组合了起来 一个future就是一条调用链 调用链与调用链之间可以进行组合 组成的就是一个更大的future 但是future也仅仅是future而已其只是通过通过另一种方式描述了将要做的事情 就像一个蓝图 还要一个执行者 这个执行者就是tokio 所提供的东西</p>\n<h1>park 是个什么概念</h1>\n<h1>how a task init?</h1>\n<h1>task 与thread是什么关系</h1>\n<h2>根据操作系统概念的划分我们能够知道process与thread的区别 能够去调用current<em>process and current</em>thread but how can we call something like task::current</h2>\n<h2>how task works</h2>\n<h2>Task::current的实现</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Task <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>borrowed<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> unpark <span class=\"token operator\">=</span> borrowed<span class=\"token punctuation\">.</span>unpark<span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> events <span class=\"token operator\">=</span> borrowed<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Task <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">:</span> borrowed<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            unpark<span class=\"token punctuation\">:</span> unpark<span class=\"token punctuation\">,</span>\n            events<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> with<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">:</span> <span class=\"token function\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BorrowedTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> <span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no Task is currently running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">is_null</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no Task is currently running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> BorrowedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">static</span> GET<span class=\"token punctuation\">:</span> AtomicUsize <span class=\"token operator\">=</span> ATOMIC_USIZE_INIT<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> SET<span class=\"token punctuation\">:</span> AtomicUsize <span class=\"token operator\">=</span> ATOMIC_USIZE_INIT<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[inline]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> GET<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>Relaxed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span> <span class=\"token operator\">=></span> None<span class=\"token punctuation\">,</span>\n        n <span class=\"token operator\">=></span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> mem<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>transmute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>usize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看起来GET 实质上是一个<code class=\"language-text\">fn() -&gt; *mut u8</code>的函数指针 这个函数返回的是一个指向BorrowedTask的指针\n那么问题在于谁设置的这个指针呢 这个函数又是怎么实现的呢?(为什么要用指针啊 transmute真的安全吗? 2333)\n然后我就找到了注释</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">/// Initialize the `futures` task system.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This function is an unsafe low-level implementation detail typically only</span>\n<span class=\"token comment\">/// used by crates using `futures` in `no_std` context. Users of this crate</span>\n<span class=\"token comment\">/// who also use the standard library never need to invoke this function.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// The task system in the `futures` crate relies on some notion of \"local</span>\n<span class=\"token comment\">/// storage\" for the running thread and/or context. The `task::current` function</span>\n<span class=\"token comment\">/// can get invoked in any context, for example, and needs to be able to return</span>\n<span class=\"token comment\">/// a `Task`. Typically with the standard library this is supported with</span>\n<span class=\"token comment\">/// thread-local-storage, but this is not available in `no_std` contexts!</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This function is provided to allow `no_std` contexts to continue to be able</span>\n<span class=\"token comment\">/// to use the standard task system in this crate. The functions provided here</span>\n<span class=\"token comment\">/// will be used as-if they were thread-local-storage getters/setters. The `get`</span>\n<span class=\"token comment\">/// function provided is used to retrieve the current thread-local value of the</span>\n<span class=\"token comment\">/// task system's pointer, returning null if not initialized. The `set` function</span>\n<span class=\"token comment\">/// updates the value of the pointer.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// # Return value</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This function will return whether initialization succeeded or not. This</span>\n<span class=\"token comment\">/// function can be called concurrently and only the first invocation will</span>\n<span class=\"token comment\">/// succeed. If `false` is returned then the `get` and `set` pointers provided</span>\n<span class=\"token comment\">/// were *not* registered for use with the task system, but if `true` was</span>\n<span class=\"token comment\">/// provided then they will be called when the task system is used.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Note that while safe to call concurrently it's recommended to still perform</span>\n<span class=\"token comment\">/// external synchronization when calling this function. This task system is</span>\n<span class=\"token comment\">/// not guaranteed to be ready to go until a call to this function returns</span>\n<span class=\"token comment\">/// `true`. In other words, if you call this function and see `false`, the</span>\n<span class=\"token comment\">/// task system may not be ready to go as another thread may still be calling</span>\n<span class=\"token comment\">/// `init`.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// # Unsafety</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This function is unsafe due to the requirements on the behavior of the</span>\n<span class=\"token comment\">/// `get` and `set` functions. The pointers returned from these functions must</span>\n<span class=\"token comment\">/// reflect the semantics specified above and must also be thread-local,</span>\n<span class=\"token comment\">/// depending on the definition of a \"thread\" in the calling context.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个是std下的实现</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token function\">thread_local!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span> CURRENT_TASK<span class=\"token punctuation\">:</span> Cell<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Cell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> INIT<span class=\"token punctuation\">:</span> Once <span class=\"token operator\">=</span> ONCE_INIT<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Since this condition will always return true when TLS task storage is</span>\n    <span class=\"token comment\">// used (the default), the branch predictor will be able to optimize the</span>\n    <span class=\"token comment\">// branching and a dynamic dispatch will be avoided, which makes the</span>\n    <span class=\"token comment\">// compiler happier.</span>\n    <span class=\"token keyword\">if</span> core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is_get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>CURRENT_TASK<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>c<span class=\"token operator\">|</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>这个CURRENT_TASK是怎么样设置进去的</h2>\n<p>看起来是下面这个函数设置的</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> set<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a,</span> F<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>BorrowedTask<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R\n    <span class=\"token keyword\">where</span> F<span class=\"token punctuation\">:</span> <span class=\"token function\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Lazily initialize the get / set ptrs</span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">// Note that we won't actually use these functions ever, we'll instead be</span>\n    <span class=\"token comment\">// testing the pointer's value elsewhere and calling our own functions.</span>\n    INIT<span class=\"token punctuation\">.</span><span class=\"token function\">call_once</span><span class=\"token punctuation\">(</span><span class=\"token operator\">||</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> get <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>transmute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>usize<span class=\"token punctuation\">,</span> _<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>transmute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>usize<span class=\"token punctuation\">,</span> _<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Same as above.</span>\n    <span class=\"token keyword\">if</span> core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is_get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">const</span> Cell<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">impl</span> Drop <span class=\"token keyword\">for</span> Reset <span class=\"token punctuation\">{</span>\n            <span class=\"token attribute attr-name\">#[inline]</span>\n            <span class=\"token keyword\">fn</span> <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> slot <span class=\"token operator\">=</span> <span class=\"token function\">tls_slot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> _reset <span class=\"token operator\">=</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> _ <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>谁 init/update/set CURRENT_TASK</h2>\n<h1>我们如何控制poll的频率 能不做到更精细的控制</h1>\n<h1>相关阅读</h1>\n<p><a href=\"https://users.rust-lang.org/t/how-futures-tasks-work-with-executors/11585/8\">how-futures-tasks-work-with-executors</a><br>\n<a href=\"https://www.reddit.com/r/rust/comments/73l6na/looking_into_the_future_a_post_explaining_how/\">looking<em>into</em>the<em>future</em>a<em>post</em>explaining_how</a>\n<a href=\"https://www.coredump.ch/2017/07/05/understanding-the-tokio-reactor-core/\">understanding-the-tokio-reactor-core</a></p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言须知/rust/futures/future/"}}