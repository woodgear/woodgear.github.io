{"data":{"markdownRemark":{"html":"<h1>import-package</h1>\n<h1>dependency</h1>\n<p>python 通过pip(类似于npm/cargo的包管理工具) pipenv(虚拟化python包依赖环境 使得每个python项目的包环境能够相互隔离 python特有的问题?) pipfile (记录安装的包)<br>\n<a href=\"https://blog.windrunner.me/python/pip.html\">pip 与 Pipfile</a><br>\n所以看起来 pipenv &#x3C;==> npm/cargo 值得注意的是只用使用<code class=\"language-text\">pipenv shell</code>才是真正的shell环境</p>\n<h2>install pip3</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python3-pip</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>install pipenv</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> pipenv</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>install package by pipfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pipenv <span class=\"token function\">install</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>add-a-new-package</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pipenv <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><a href=\"https://pipenv-fork.readthedocs.io/en/latest/basics.html\">pipenv</a></p>\n<h2>import-into-local</h2>\n<h1>规范</h1>\n<p>每个函数 必须通过文档(文档字符串) 表明参数类型返回值类型\n<a href=\"https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#comments\">文档字符串</a></p>\n<p>类型名驼峰.文件,方法,属性,变量 小写下划线(snake_case)</p>\n<h1>包管理</h1>\n<p>pip pipenv</p>\n<h1>测试</h1>\n<h2><a href=\"https://docs.python.org/zh-cn/3/library/unittest.html\">unittest</a></h2>\n<p>python 自带的测试框架\n原理应该是通过继承来使得某个类是拥有运行测试的能力</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">python <span class=\"token operator\">-</span>m unittest discover <span class=\"token comment\"># 自动跑所有测试</span>\npython <span class=\"token operator\">-</span>m unittest test<span class=\"token punctuation\">.</span>test_find_unknow_words \n<span class=\"token comment\"># python -m unittest ${test-folder-name}.${test-file-name} # 制定测试文件</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>test suite</h3>\n<p>通过在测试类中实现特定的方法来实现初始化和析构\nsetUp() => beforeEach()\ntearDown() => afterEach()</p>\n<div class=\"gatsby-highlight\" data-language=\"python3\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python3 line-numbers\"><code class=\"language-python3\"># basic example\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual(&#39;foo&#39;.upper(), &#39;FOO&#39;)\n\n    def test_isupper(self):\n        self.assertTrue(&#39;FOO&#39;.isupper())\n        self.assertFalse(&#39;Foo&#39;.isupper())\n\n    def test_split(self):\n        s = &#39;hello world&#39;\n        self.assertEqual(s.split(), [&#39;hello&#39;, &#39;world&#39;])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == &#39;__main__&#39;:\n    unittest.main()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>语法</h1>\n<h1>l-string-fmt</h1>\n<p>最新的姿势叫做<a href=\"https://realpython.com/python-f-strings/\">f-strings</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">name = &quot;misaki&quot;\nage = &quot;16&quot;\ndesc = f&quot;{name} is {age} years old&quot;\nprint(desc)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>OO</h1>\n<p>类中如何定义属性 初始化 设置/获取属性 如何定义方法</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">Class <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">:</span>\n    count_of_call_get <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># class attribute access via Demo.count_of_call_get</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token comment\"># a is instance attribute</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_a</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>a <span class=\"token comment\"># acess via self</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_a</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>a <span class=\"token comment\"># modify via self</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 构造类</span>\nDemo<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h1>capture-control-c-in-python</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># DO THINGS</span>\n<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># quit</span>\n    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>实际上每个try catch 都必须处理KeyboardInterrupt才能生效</p>\n<h1>try catch</h1>\n<div class=\"gatsby-highlight\" data-language=\"python3\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python3 line-numbers\"><code class=\"language-python3\">try:\n    raise Exception(&#39;spam&#39;, &#39;eggs&#39;)\nexcept Exception as inst:\n    print(inst)  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>抛出异常</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">raise Exception(&#39;x should not exceed 5. The value of x was: {}&#39;.format(x))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>控制流</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token string\">'luren'</span>\n<span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span> <span class=\"token string\">'welcome boss'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> name   </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>import</h1>\n<div class=\"gatsby-highlight\" data-language=\"python3\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python3 line-numbers\"><code class=\"language-python3\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<h1>l-io</h1>\n<h2>l-console-out</h2>\n<div class=\"gatsby-highlight\" data-language=\"python3\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python3 line-numbers\"><code class=\"language-python3\"># python3中并没有println print 会默认带换行\nprint(&quot;xxx&quot;)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>","fields":{"slug":"/share/编程语言要素/python3/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"ayplmsk","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"python3","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-11-26T15:05:48.118Z","relativeDirectory":"share/编程语言要素","absolutePath":"/home/oaa/sm/ns/share/blog/share/编程语言要素/python3.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言要素/python3/","disqus":{"shortname":"woodgear-blog"}}}