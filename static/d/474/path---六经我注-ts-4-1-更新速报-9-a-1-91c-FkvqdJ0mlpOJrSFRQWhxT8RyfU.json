{"data":{"markdownRemark":{"html":"<h2>Template Literal Types</h2>\n<p>当我们将字符串字面量当作一种独立的类型而不是字符串类型的一个实例时,注定着,围绕着字符串字面量这种类型,会有一系列的高阶类型可供我们使用.当我们考虑其与现有TS机制(<code class=\"language-text\">in</code>,<code class=\"language-text\">|</code>)的正交性时,反而能迸发出有趣的更强大的表达力.</p>\n<h3>组合 (construct)</h3>\n<p>就像类型可以组合一样,字符串字面量类型也可以组合来构成新的字符串字面量类型,在ts中这种组合类型的能力借助我们熟悉的<code class=\"language-text\"></code>的语法暴露出来</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> str2 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-bbb`</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">:</span>str2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaa-bbb\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaaa\"</span><span class=\"token punctuation\">)</span> # <span class=\"token keyword\">this</span> will report a error</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>object propriety (union)</h3>\n<p>字符串字面量的union就像枚举一样也可以作为object的propriety</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span>  <span class=\"token string\">\"a\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\ntype o1 = {\n    a: number;\n    v: number;\n}\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>union and construct</h3>\n<p>当我们把union和construct结合到一起时会是怎么样的语义?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A1\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"A2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"B1\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"B2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"C1\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"C2\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> a <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">A</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">B</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">C</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>是笛卡尔积! 有人在里面加了笛卡尔!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"A1:B1:C1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A1:B1:C2\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A1:B2:C1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A1:B2:C2\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A2:B1:C1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A2:B1:C2\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A2:B2:C1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"A2:B2:C2\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>为了防止组合爆炸的问题,union的乘积最大是100,000 </p>\n<h3>generic type (keyof,generic)</h3>\n<p>恩.. 总的来讲就是也能够在范型中使用字符串字面量类型</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> PropEventSource<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>eventName<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>string <span class=\"token operator\">&amp;</span> keyof <span class=\"token constant\">T</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Changed`</span></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> PropEventSource<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    on<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">(</span>eventName<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">K</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Changed`</span></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> makeWatchedObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> PropEventSource<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">makeWatchedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Homer\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n    location<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Springfield\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// works! 'newName' is typed as 'string'</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstNameChanged\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">newName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 'newName' has the type of 'firstName'</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`new name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newName<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// works! 'newAge' is typed as 'number'</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ageChanged\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">newAge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newAge <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"warning! negative age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Utility Type</h3>\n<p>就像普通类型有<code class=\"language-text\">Partial</code>,<code class=\"language-text\">Readonly</code>等各种工具类型帮我们转换类型一样,对于literal string type也是同样,这次新加了<code class=\"language-text\">Uppercase</code>,<code class=\"language-text\">Lowercase</code>,<code class=\"language-text\">Capitalize</code>,<code class=\"language-text\">Uncapitalize</code>这几种顾名思义的工具类型,顺带一提这几个类型的实现都编译器处理的,看来我们离花式把玩字符串还是有点距离.</p>\n<h3>remap</h3>\n<p>考虑范型+keyof这个场景,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>我们还能做什么? 当然是对K再次的进行操作</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> MappedTypeWithNewKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">as</span> NewKeyType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">//            ^^^^^^^^^^^^^</span>\n    <span class=\"token comment\">//            This is the new syntax!</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>于是这里引入了一个<code class=\"language-text\">as</code>表达式<br>\n有了<code class=\"language-text\">as</code>就使用上来说我们是有了一个能够进行类型操作的场所</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> RemoveKindField<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">as</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kind\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Recursive Conditional Types</h2>\n<p>一个很经典的TS type问题是: 给定一个范型类型,要怎么样拿到那个被包裹的范型.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Wrapper<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  inner<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> wrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Wrapper<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> inner<span class=\"token punctuation\">:</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Unwrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> \n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> a_t <span class=\"token operator\">=</span> Unwrap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> a<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//how to get number?</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这实际上就是<a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html\">conditional-types</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Unwrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Wrapper</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>问题在于假如我是多层嵌套的Wrapper呢?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> a_t <span class=\"token operator\">=</span> Unwrap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> a<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//number</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> c  <span class=\"token operator\">=</span> Unwrap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> b<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wrapper&lt;number> instead of number</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这这种情况下很明显我们的Unwrap要能够自指,也就是递归(Recursive Conditional Types).  </p>\n<p>在之前版本的TS中对于这种Recursive Conditional Types,做了限制,这次的更新放宽了这种限制,使得我们能够在Conditional Type中自指.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> SuperUnwrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Wrapper</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token operator\">?</span> SuperUnwrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> d <span class=\"token operator\">=</span> SuperUnwrap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> b<span class=\"token operator\">></span> <span class=\"token punctuation\">;</span><span class=\"token comment\">// number</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>上述代码在Ts4.1之前会报错<code class=\"language-text\">Type alias &#39;SuperUnwrap&#39; circularly references itself.(2456)</code></p>\n<p><a href=\"https://www.typescriptlang.org/play?ts=4.1.0-beta#code/C4TwDgpgBA6gTgQzJOAeAKgPigXigbwCgooBLAO3IjgC4p0BuQgXycIDMBXcgY2FID25KAHdEYDJgAUCOugCUdeEhSSCxKHAjBOcYfjKVqdBFFYtChUJCgBVcmKRq86KBAAewCOQAmAZ1hxVQp2ajtsAH47KDoqADdqNh4hP2AoUzxHMCkABnkma2gEAH00vHss1EKBdnTMBigAekbyTgBbACNqS2TyVKgO3FFxGXyrcGgeEnKHcSqJmoH6psbAlWpUVs7qbApUiAQfKEWtrrhLQqgAZU4UCrmsIdcPL18A5WQNkLDbTCibu6zJy-GjxbrjGxHPAA6j3JzVWodbAMZpQU7UIA\">Recursive Conditional Types Demo</a></p>","fields":{"slug":"/六经我注/TS4-1更新速报/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"07b21e","time":"2020-11-20T11:26:48+08:00","tag":null},"parent":{"__typename":"File","name":"TS4-1更新速报","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-11-26T15:05:48.114Z","relativeDirectory":"六经我注","absolutePath":"/home/oaa/sm/ns/share/blog/六经我注/TS4-1更新速报.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/六经我注/TS4-1更新速报/","disqus":{"shortname":"woodgear-blog"}}}