{"data":{"markdownRemark":{"html":"<p>当辛辛苦苦搬完砖后,你优雅的</p>\n<ol>\n<li><code class=\"language-text\">git commit -m &quot;xxx&quot;</code></li>\n<li><code class=\"language-text\">git push xxx</code></li>\n<li>手动到网页上点击那个绿色的按钮\"New pull request\"</li>\n<li>点击确定</li>\n</ol>\n<p>实际第三步和第四步破坏了开发的体验\n我们要做的事情的语义是确定的,理论上讲只要两步就可以了</p>\n<ol>\n<li>在本地准备好一个分支</li>\n<li>以这个分支提一个pr</li>\n</ol>\n<p><a href=\"https://cli.github.com/\">gh</a>是一个官方的GitHub CLI 管理工具.将其加入到workflow中可以修复这一体验</p>\n<h2>push current branch and request a pull request</h2>\n<p>gh pr create -f</p>\n<h2>review workflow</h2>\n<p>review时一般分为四步  </p>\n<ol>\n<li>查看pr list 获取到到一个number 这个number后续操作的id <code class=\"language-text\">gh pr list</code></li>\n<li>查看pr diff <code class=\"language-text\">gh pr diff ${number}</code> 会显示出如同git diff的输出 来检查这次的pr的更改</li>\n<li>review pr <code class=\"language-text\">gh pr review ${number}</code> 会显示三个选项 approve comment body 使用箭头和回车进行选择</li>\n<li>merge pr <code class=\"language-text\">gh pr merge ${number}</code> 同样会让你选择是 rebase 还是squash 还是 create merge commit</li>\n</ol>\n<h2>one more</h2>\n<p>总而言之,gh所带来的体验于图形界面无二. 但命令行的优势在于其的可组合性\nreview workflow中的3-4 两部实际上也可以归并起来<br>\n<code class=\"language-text\">PR_ID=${} &amp;&amp; gh pr review $PR_ID -a &amp;&amp; gh pr merge $PR_ID -d -r</code></p>\n<p>当当前分支就是提出pr的分支时 number实际上是不需要指定的.<br>\n所以实际上也可以</p>\n<ol>\n<li><code class=\"language-text\">gh pr list</code></li>\n<li><code class=\"language-text\">gh pr checkout $number &amp;&amp; gh pr diff</code> </li>\n<li>\n<p><code class=\"language-text\">gh pr -a &amp;&amp; gh pr merge -d -r</code>\n不过这要求切换到一个分支所以不是很实用<br>\n总而言之</p>\n<h3>create pr</h3>\n<p><code class=\"language-text\">gh pr create -f</code></p>\n<h3>review and merge pr</h3>\n</li>\n<li><code class=\"language-text\">gh pr list</code></li>\n<li><code class=\"language-text\">gh pr diff ${number}</code></li>\n<li>\n<p><code class=\"language-text\">PR_ID=${} &amp;&amp; gh pr review $PR_ID -a &amp;&amp; gh pr merge $PR_ID -d -r</code></p>\n<h2>不足/优化</h2>\n</li>\n<li>可能是因为网络的原因 使用gh有时会失败</li>\n<li>目前的工作流中的一个要求是 多个commit使用squash merge到master使用create merge commit.可能要写函数</li>\n<li>理论上讲,在正常的工作中,pr只有一个,所以第一步和第二步可以合成一个</li>\n</ol>\n<h2>one more more</h2>\n<p>通过使用alias 我们可以继续进行优化</p>\n<h3>create pr</h3>\n<p><code class=\"language-text\">gh alias set cpr &#39;pr create -f&#39;</code></p>\n<h3>check diff</h3>\n<p><code class=\"language-text\">gh alias set --shell see &quot;gh pr list |cat|tail |awk &#39;{print \\$1}&#39; | xargs -I {} sh -c &#39;echo {} &amp;&amp; gh pr diff {}&#39;&quot;</code>​</p>\n<h3>merge pr</h3>\n<p><code class=\"language-text\">gh alias set --shell  mg &quot;gh pr review \\$1 -a &amp;&amp; gh pr merge \\$1 -d -r&quot;</code></p>\n<p>这样的话使用的体验就是</p>\n<ul>\n<li>创建pr <code class=\"language-text\">gh cpr</code></li>\n<li>查看pr <code class=\"language-text\">gh see</code></li>\n<li>\n<p>merge pr <code class=\"language-text\">gh mg $number</code></p>\n<blockquote>\n<p>丝滑\n不足/优化</p>\n</blockquote>\n</li>\n<li>可能是因为网络的原因 使用gh有时会失败</li>\n<li>目前的工作流中的一个要求是 多个commit使用squash merge到master使用create merge commit.可能要写函数</li>\n</ul>","fields":{"slug":"/tech-share/speeeedup-add-gh-to-you-work-flow/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"e70708","time":"2020-10-15T11:12:49+08:00","tag":"工程效率,workflow优化"},"parent":{"__typename":"File","name":"speeeedup-add-gh-to-you-work-flow","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-11-26T15:06:15.456Z","relativeDirectory":"tech-share","absolutePath":"/home/oaa/ns/share/blog/tech-share/speeeedup-add-gh-to-you-work-flow.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tech-share/speeeedup-add-gh-to-you-work-flow/","disqus":{"shortname":"woodgear-blog"}}}