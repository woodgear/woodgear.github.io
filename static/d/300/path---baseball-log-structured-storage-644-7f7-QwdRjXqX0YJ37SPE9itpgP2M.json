{"data":{"markdownRemark":{"html":"<p><a href=\"http://blog.notdot.net/2009/12/Damn-Cool-Algorithms-Log-structured-storage\">lss</a></p>\n<p><a href=\"https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf\">lsfs</a></p>\n<h1>lss</h1>\n<h2>一句话概括</h2>\n<p>基于log能够完成数据库操作,且会带来各种好处</p>\n<h2>大纲</h2>\n<p>1- 传统数据库模型在将数据持久化到磁盘上时操作会很复杂.<br>\n2- 基于log的数据库模型避免了上述复杂性<br>\n3- 下面是介绍如何通过log来完成数据库的各项操作<br>\n3-1 增加一个元素(两条log,一条新元素,一条新元素表)<br>\n3-2 如何找到最新的元素表(读最后一条  记录,或者单独的存一个block记录最后的元素表位置,虽然不怎么log base了)<br>\n3-3 如何解决磁盘爆炸的问题<br>\n3-3-1 传统模型在磁盘爆炸时表现糟糕<br>\n3-3-2 logbase 可以将log分为固定长度的chunk,在磁盘不够时选一个chunk进行重建<br>\n3-3-3 介绍这种操作的好处<br>\n3-3-3-1 这种重建操作实际上带来了很大的灵活性,1. 我们实际上可以选择任意的chunk进行重建(这样的话与传统模型不同我们实际上可以不用去重写那些没有变的数据) 2. 我们可以挑选重建chunk的时间,可以等到某个chunk完全被重写在重建(实际上直接删掉就行)<br>\n4- 其他优点<br>\n4-1 1. crash后恢复很容易. 2. 可以将写请求缓存在内存中 然后定时的同步到磁盘上. 3. 备份可以增量备份 4. 因为只会在最后面写log而不会修改已有的数据 所以可以无锁的直接并发读,对于写请求可以使用乐观锁?<br>\n5- 列举其他已经使用这用这种技术的系统  </p>\n<h2>作者的话</h2>\n<p>log base用在数据库上超赞</p>\n<h1>bitcask</h1>\n<p>问题在于merge process 如何与work process 合作,假设使用两个线程则in-memory-index就必须加锁</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/baseball/log-structured-storage/"}}