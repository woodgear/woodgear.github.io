{"data":{"markdownRemark":{"html":"<h1>Raft</h1>\n<p>Raft实际上要求使用者是必须是状态机模型,Raft负责保证状态机的输入是一致的,\n在此之上,我们就可以通过在启动多个同样的状态机,来保证当出现状态机本身逻辑之外的错误时,能有一个未遭遇此错误的状态机正常,从而达到容错的作用\n每个Node维护一个command列表,当确定集群中大多数节点共享相同的commands时(达成共识),将这些command应用到应用的状态机中,达成共识的commandlist是不可修改的(imuate)</p>\n<p>既然我们的应用是状态机模型.达成共识的一个最简单的方法是,所有的请求都只给一个节点(将其称之为Leader节点),这个节点收到请求后,将请求存储起来(维护自己的command列表), 等到确认所有其他的Node(将其称之为follower)的commandlist和自己的commandlist一致后将这个command喂给应用,所谓的确保所有Node一致,最简单的做法就是向所有follower发请求,强行将自己的commandlist灌进去.,这样的话在每个节点(follower)上可以保证他们存储的commandlist与被选中的那个节点(leader)是一致的(达成共识的).在这种情况下,实际上无论谁被选中都是一样的,Node的状态是一致的,他们是等价的.现在,假设这个被选中的Node(leader)突然出现了问题(非逻辑问题,而是诸如断网,磁盘空间不够等问题),我们可以直接请求其他的Node,因为他们是等价的,这样就是所谓的容错性.</p>\n<p>Raft描述的就是在 </p>\n<ol>\n<li>上述概念下的优化(实际上不用将全部的cmdlist发给follower),</li>\n<li>一些具体的关于如何维护节点commandlist一致,和为什么这样就一致了的证明,</li>\n<li>如何选择Leader节点,</li>\n<li>与在此之上的一些操作(扩容),</li>\n<li>和从现实角度考虑会遇到的一些问题的解决方法(commandlist是无限的,但存储是有限的 snapshot)</li>\n<li>客户端如何向一个Raft集群发起请求</li>\n</ol>\n<h2>tiny</h2>\n<ol>\n<li>TinyKV 将Raft抽象封装到Node这个概念中,使用Node的人,通过读取Node.Ready()方法返回的command list来获取那些达成共识的command.将这些command应用到状态机中</li>\n<li>由使用者维护HardSate(Config信息) Entries(命令) Snapshot(使用者自身状态) 的持久化</li>\n<li>协助Node之间完成交流,将Node的command发送给对应的Node,将接受到的command交给自己的Node</li>\n<li>定时调用Node的tick方法,来保证Node内部一些依赖于时间的操作(heartbeattimeout,electionTimeout) 正常完成</li>\n</ol>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/program-note/tinykv/tinykv/"}}