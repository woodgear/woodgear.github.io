{"data":{"markdownRemark":{"html":"<h1>定义变量</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">string testString = &quot;This is a string.&quot;;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>函数定义</h1>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">return_type function_name( parameter list ) {\n   body of the function\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>class</h1>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">//a.h\nclass A\n{ \n    public:   \n    string name; \n  \n    string getname();\n    void sayHi();\n    // 同名函数为构造函数\n    A();\n    // 类方法 或者讲静态方法\n    static A fromOther();\n}; \n\n\n//a.cpp\nA::A() {\n\n}\nstd::string A::getname()\n{\n    return this.name;\n}\nstd::string A::sayHi()\n{\n    printf(&quot;hi,i am %s&quot;.this-&gt;getname());\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>调用构造函数</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token comment\">// a: A*</span>\n<span class=\"token comment\">// A* a = new A();</span>\n<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a: A</span>\n<span class=\"token comment\">// A a = A();</span>\n<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nA <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//std::vector&lt;char> data(buffer, buffer + size);</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>exception</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">division</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token string\">\"Division by zero condition!\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-string-format</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span>       </span><span class=\"token comment\">// std::string</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>     </span><span class=\"token comment\">// std::cout</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span>      </span><span class=\"token comment\">// std::stringstream</span>\n\n<span class=\"token keyword\">int</span> main <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  std<span class=\"token operator\">::</span>stringstream ss<span class=\"token punctuation\">;</span>\n  ss <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token operator\">::</span>string real_string <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> real_string<span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-log</h1>\n<p>PLOG 看起来比较好</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token comment\">// in init</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;plog/Log.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;plog/Initializers/RollingFileInitializer.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;plog/Appenders/ConsoleAppender.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init_log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> plog<span class=\"token operator\">::</span>RollingFileAppender<span class=\"token operator\">&lt;</span>plog<span class=\"token operator\">::</span>TxtFormatter<span class=\"token operator\">></span> <span class=\"token function\">fileAppender</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.log\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> plog<span class=\"token operator\">::</span>ConsoleAppender<span class=\"token operator\">&lt;</span>plog<span class=\"token operator\">::</span>TxtFormatter<span class=\"token operator\">></span> consoleAppender<span class=\"token punctuation\">;</span>\n    plog<span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>plog<span class=\"token operator\">::</span>debug<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fileAppender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>consoleAppender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// in use</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;plog/Log.h></span></span>\nPLOGD <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","fields":{"slug":"/share/编程语言要素/cpp/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"sfkzmdc","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"cpp","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-09-26T05:07:25.056Z","relativeDirectory":"share/编程语言要素","absolutePath":"/home/oaa/ns/share/blog/share/编程语言要素/cpp.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言要素/cpp/","disqus":{"shortname":"woodgear-blog"}}}