{"data":{"markdownRemark":{"html":"<h2>2.3.4 Viewing BPF Instruction: bpftool</h2>\n<p>安装: <code class=\"language-text\">sudo apt install linux-tools-5.4.0-52-generic</code> <code class=\"language-text\">sudo apt install linux-tools-common</code>\nbpftool 能够管理所有的bpfobject,应该是和操作系统某个对应的概念交互.所以在使用bpftool 来查看和管理bpfobject时一定要先有正在运行的bpf程序才能看出东西来.</p>\n<p>使用<code class=\"language-text\">sudo opensnoop-bpfcc</code>可以跑一个带有btf_id的bpf程序出来然后就可以使用<code class=\"language-text\">linum</code>看出这两者的差别了.感觉bcc果然不愧是自带debuginfo</p>\n<h2>2.3.1 BPF-CE</h2>\n<p>compiler-once run everywhere(原来你是JAVA)</p>\n<h2>2.4 Stack Trace Walking</h2>\n<p>我们希望能有一种能力 能够跟踪到当前函数的调用路径,目前有两种提供这种能力的实现方法</p>\n<h3>2.4.1 Frame Pointer-Based Stacks</h3>\n<p>调用约定中栈指针一般在某个固定的寄存器(在x86<em>64机器上是RBP)上,一般来讲函数的返回地址就在RBP+8的位置上.函数的返回地址指向的就是调用函数(调用链上一级函数的地址),通过这种方式我们就能顺着这种调用链向上找上去,从而能够得到这个调用链.\n[:part</em>xmind_preview#bpf[\"stack trace walking\"]](./bpf.xmind)</p>\n<h2>2.5 Flame Graphs</h2>\n<h3>2.5.3 Flame Graph</h3>\n<p>火焰图要从看最上面一层 竖轴代表的是调用深度\n<a href=\"/7a6dbd3dc0d3bd5b539c8b727a6c0f34/bpf.xmind\">:part<em>xmind</em>preview#bpf[\"flame graph\"]</a></p>\n<h2>2.6 Event sources</h2>\n<p>看图说话</p>\n<h2>2.7 kprobes</h2>\n<h3>2.7.1 How kprobes Work</h3>\n<p>断点技术 </p>\n<ol>\n<li>保存目标函数地址</li>\n<li>把对应函数的地址直接换成断点(int3)或者直接换成jmp</li>\n<li>执行到对应函数 实际上调换kprobe的处理函数上 经过处理(记录) 然后在跳回去</li>\n<li>\n<p>卸载时 将换掉的函数在换回去</p>\n<h3>2.8 uprobes</h3>\n<p>原理和kprobe一样 有个叫LTTng-UST的技术可以加速BPF tracing</p>\n<h3>2.9 TracePoint</h3>\n<p>一个有人来维护的类似的kprobe的eventsource 不过他是逻辑性的不像kprobe就是每个内核函数\n实现原理: 编译时实际上tracepoint是一个noop指令</p>\n<h4>2.9.5 BPF Raw TracePoint</h4>\n<p>某种加速tracepoint的手段</p>\n<h2>2.10 USDT user-level statically defined tracing</h2>\n<p>在代码中增加tracepoint的方式</p>\n<h2>2.11 Dynamic USDT</h2>\n<p>在动态语言或者虚拟机语言中增加tracepoint的方式 原理应该是调DLL然后在DLL中实现</p>\n<h2>2.12 PMCs</h2>\n<p>处理器提供的event\n例如cpu cache missing,page fault等</p>\n</li>\n</ol>","fields":{"slug":"/baseball/BPF Performance Tools/part1:technolgies/c2:Technology Background/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"fb773c","time":"2020-11-17T21:56:37+08:00","tag":null},"parent":{"__typename":"File","name":"c2:Technology Background","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-11-27T01:32:42.982Z","relativeDirectory":"baseball/BPF Performance Tools/part1:technolgies","absolutePath":"/home/oaa/ns/share/blog/baseball/BPF Performance Tools/part1:technolgies/c2:Technology Background.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/baseball/BPF Performance Tools/part1:technolgies/c2:Technology Background/","disqus":{"shortname":"woodgear-blog"}}}