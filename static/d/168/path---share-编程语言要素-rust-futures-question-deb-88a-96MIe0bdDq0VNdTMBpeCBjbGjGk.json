{"data":{"markdownRemark":{"html":"<p>sorry for my English. if you could not understand what I talk just point it out.<br>\nI am currently try to figure out how task::current works.<br>\nafter digging some source code. I think I understand the call stack of task::current but still sth confuse me like the title.\nthere is something I found out, correct me if I was wrong.  </p>\n<p>current use a function called get_ptr to get a pointer of BorrowedTask.the BorrowedTask  is the current task.<br>\nsource code under blow  </p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Task <span class=\"token punctuation\">{</span>\n <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token punctuation\">|</span>borrowed<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> unpark <span class=\"token operator\">=</span> borrowed<span class=\"token punctuation\">.</span>unpark<span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> events <span class=\"token operator\">=</span> borrowed<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Task <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">:</span> borrowed<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            unpark<span class=\"token punctuation\">:</span> unpark<span class=\"token punctuation\">,</span>\n            events<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> with<span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">:</span> <span class=\"token function\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BorrowedTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> <span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no Task is currently running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">is_null</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no Task is currently running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> BorrowedTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">thread_local!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span> CURRENT_TASK<span class=\"token punctuation\">:</span> Cell<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Cell<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> INIT<span class=\"token punctuation\">:</span> Once <span class=\"token operator\">=</span> ONCE_INIT<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// Since this condition will always return true when TLS task storage is</span>\n <span class=\"token comment\">// used (the default), the branch predictor will be able to optimize the</span>\n <span class=\"token comment\">// branching and a dynamic dispatch will be avoided, which makes the</span>\n <span class=\"token comment\">// compiler happier.</span>\n <span class=\"token keyword\">if</span> core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is_get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>CURRENT_TASK<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>c<span class=\"token operator\">|</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>so the question is who and when to set/update/init the CURRENT_TASK.<br>\nthis is a function called set, seems the only way to do those stuff.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"> \n<span class=\"token keyword\">fn</span> <span class=\"token function\">tls_slot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> Cell<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    CURRENT_TASK<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token operator\">|</span>c<span class=\"token operator\">|</span> c <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> _<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> set<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a,</span> F<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>BorrowedTask<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R\n <span class=\"token keyword\">where</span> F<span class=\"token punctuation\">:</span> <span class=\"token function\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R\n<span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// Lazily initialize the get / set ptrs</span>\n <span class=\"token comment\">//</span>\n <span class=\"token comment\">// Note that we won't actually use these functions ever, we'll instead be</span>\n <span class=\"token comment\">// testing the pointer's value elsewhere and calling our own functions.</span>\n    INIT<span class=\"token punctuation\">.</span><span class=\"token function\">call_once</span><span class=\"token punctuation\">(</span><span class=\"token operator\">||</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> get <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>transmute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>usize<span class=\"token punctuation\">,</span> _<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>transmute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>usize<span class=\"token punctuation\">,</span> _<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">// Same as above.</span>\n <span class=\"token keyword\">if</span> core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is_get_ptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">struct</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">const</span> Cell<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">impl</span> Drop <span class=\"token keyword\">for</span> Reset <span class=\"token punctuation\">{</span>\n            <span class=\"token attribute attr-name\">#[inline]</span>\n <span class=\"token keyword\">fn</span> <span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> slot <span class=\"token operator\">=</span> <span class=\"token function\">tls_slot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> _reset <span class=\"token operator\">=</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> _ <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> u8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        core<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>and then the question is who calls the set function.<br>\nand I find than I could not find whom to call set.<br>\nthe calling chain seems broken.<br>\nafter some search </p>\n<blockquote>\n<p> It is initialized by a reactor before polling a task and as discussed  above, may be overridden by specific futures within the task </p>\n</blockquote>\n<p>I found some word come from <a href=\"https://gist.github.com/Diggsey/6f924bf3f741bcdffd240faee102fe92\">Looking into the Future</a></p>\n<p>It seems to say that is there some code under tokio-reactor to called the set function, but after a search in tokio I still could not find anything about that.</p>\n<p>please help me with that.</p>","fields":{"slug":"/share/编程语言要素/rust/futures/question/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"tfyuhwu","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"question","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-09-26T05:07:26.388Z","relativeDirectory":"share/编程语言要素/rust/futures","absolutePath":"/home/oaa/ns/share/blog/share/编程语言要素/rust/futures/question.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/编程语言要素/rust/futures/question/","disqus":{"shortname":"woodgear-blog"}}}