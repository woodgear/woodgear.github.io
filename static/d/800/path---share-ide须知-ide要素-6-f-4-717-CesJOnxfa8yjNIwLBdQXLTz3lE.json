{"data":{"markdownRemark":{"html":"<h1>名词定义</h1>\n<p>这里的IDE泛指所有的操作文字/源码的软件 包括但不限于 notepad/vim/emacs/vscode/idea/atom etc.</p>\n<h1>问题定义</h1>\n<p>问题在于我们希望通过IDE做什么.在我们的脑海中有我们想实现的功能 (一个想法) 接下来我们要表达我们的想法(以源码的形式) 再通过编译器编译执行 得到反馈 从而产生新的想法\n即 想法 -> 表达 -> 反馈 -> 想法 的一个闭环. 所谓的IDE的技术就是如何最简化 表达->反馈 的过程 的技术.\n本质原因是人脑计算能力的不够 否则的话就是 想法->表达 的一个回路了\n所谓的表达 即将大脑中想法变成源码的过程 类如 现在我想在屏幕上输出'hello world' 这就是一个想法,这是我对未来的一种断言. 同时的我会编程 所以我知道需要用某种语言来表达这种想法 来与计算机沟通 再同时的我会rust,到这里 这个想法就变得更具体了一点 我需要一个文件里边是rust的源码</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">cargo new demo</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">// demo/src/main.rs</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//如果你懂的话这一行是编译不过的 不过不用困惑 这是故意的 请向下看</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我要某种方式使的语言的源码变成真正的计算机可以理解的语言\n<code class=\"language-text\">cargo run</code>\n从一个想法 <em>屏幕输出</em>(A) 到(B)另一个想法(C) <em>rust代码</em> 这一步是在我们脑海中发生的, 此时我们暂停一下稍微检查一下这三者\nA: <em>屏幕输出</em> 这个想法是一切的缘起 在这里我们无需质疑其存在的价值\nB: 想法转换的过程 这是一个从抽象到具体的过程 我们想<em>屏幕输出</em> 但是怎么做呢? 用小刀在电脑屏幕上划出'hello world'? 用画图在画出hello world? 用C/JAVA/RUST?\nC: <em>RUST代码</em> 这个想法实际上是一个更具体的想法,是脑海中的最后一步,是一个可以指导我们具体行为的想法\n现在我们从<em>屏幕输出</em>这个想法 跳转到<em>RUST代码</em>这个想法上了 接下来就该卷起指套 伸展手指 左手稍稍用力 敲击f键了\n但 真的是如此吗</p>\n<blockquote>\n<p>进入正题警告</p>\n</blockquote>\n<h1>从零开始 一阶序与二阶序</h1>\n<p>现在我们的电脑上打开这着我们最爱的IDE(vim/emac 等自行填空)\n屏幕上一片空白 (或者是请你资助乌干达) 手上摆着的是键盘 我们该怎么办?\nQ: 依次按下 'f' 'n' ' ' 'm' ...\nA: 如果你是在用vim的话 你已经死了\n当我们在谈论如何操作/编辑文本/文本的时候 我们实际上是在说下列的事情\n移动\n插入\n修改</p>\n<p>删除</p>\n<p>复制\n粘贴</p>\n<p>撤销\n搜索/替换\n搜索/跳转</p>\n<h1>l-basic</h1>\n<p>基础移动 上 下 左 右\n单词移动 左边一个单词 右边一个单词\n当前行行首 当前行行末\n整个文件开始 整个文件结束\n移动到某一行</p>\n<p>插入\n删除一个字符 删除一个单词\n从当前删除到行末\n删除当前选中\n删除某种区域 ()/{}\n从当前删除到某个字符 (开区间或者闭区间)  l-basic-delete-util-and-not-include l-basic-delete-util-and-include </p>\n<p>选择当前block 扩充选择 </p>\n<p>在选择的block中替换</p>\n<p>搜索选中的block</p>\n<p>打开文件/文件夹</p>\n<p>跳转至某一行\n跳转至代码 (dependency)\ndebug</p>\n<h2>shell (which the ghost is)</h2>\n<p>现在我们终于将源码写到了文件中(掌声),接下来时候接受反馈了\nrerun-last-command-in-the-shell</p>\n<h1>tips</h1>\n<p>最好所有的操作都能够通过键盘完成</p>\n<h1>l-package</h1>\n<h2>l-install-package</h2>\n<p>必须有安装插件的能力</p>\n<h2>l-list-installed-package</h2>\n<p>能展示出当前安装的插件</p>\n<h2>l-instll-package-from-config-file</h2>\n<p>必须有能里从某个配置文件中安装插件,更再一步的讲 最好能够通过不同的配置文件来加载不同的插件\n类似于 <code class=\"language-text\">ide -c CONFIGPATH</code> 的感觉</p>\n<h1>l-windows</h1>\n<p>窗口/tab\n向右分裂窗口\n向下分裂窗口\n只保留当前窗口\n关闭当前窗口</p>\n<p>向左/右切换tab\n关闭tab</p>\n<h2>l-terminal</h2>\n<p>终端窗口 最好有一个快捷键能够切换终端和编辑窗口\nterrminal 应当能够智能的识别错误/文件名 能够跳转的错误/文件中</p>\n<h2>l-move-focus-windows</h2>\n<h2>l-move-focus-tab</h2>\n<h2>l-file</h2>\n<h3>l-open-file</h3>\n<p>文件管理窗口\n能够执行常规的文件移动/重命名之类的操作</p>\n<h2>l-errors</h2>\n<p>显示编译错误/lint错误\n跳转到对应的错误代码</p>\n<p>在弹出窗口中查看符号定义</p>\n<h2>l-refactor</h2>\n<p>rename-symbol\n去除外层作用域 (多个嵌套的if,去除外面的一层)</p>\n<h2>lanuange-common</h2>\n<p>填充结构体</p>\n<h1>文本操作</h1>\n<h2>快速的替换</h2>\n<p>将给定的文字替换为其他的文字\n目前做的最好的是vscode的ctrl+d\nvim的 cgn 也算勉强可以 cgn的问题是有时我不是想完全替换而是想在后面或者前面新增些文本</p>\n<h1>编辑器/IDE</h1>\n<p>本质上讲相同, 问题在与当面对一堆文本时 我们所能做的操作是什么.\n编辑器相对来将倾向于将其处理为单纯的文本 所提供的操作是相对于文本而言的 搜索/替换\nIDE倾向于将其处理为特定的编程语言 提供 提取函数/拆分文件 等重构操作\n问题的关键在于 我们想做什么和能做什么之间的差距</p>\n<h1>好用的批量替换 单文件内支持直接选中当前单词并选中下一单词并更改</h1>\n<h1>完善的自动补全自动提示支持</h1>\n<h1>git diff 的支持</h1>\n<h1>好用新建文件 支持</h1>\n<h1>注释单行或多行</h1>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/share/ide须知/ide要素/"}}