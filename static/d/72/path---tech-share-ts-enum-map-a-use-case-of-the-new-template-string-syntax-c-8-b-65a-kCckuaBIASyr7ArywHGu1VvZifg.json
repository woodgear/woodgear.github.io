{"data":{"markdownRemark":{"html":"<p>template string的语法出来有段时间了,虽然字符串编程确实蛮有趣,但一直没有找到更接地气的使用场景,今天正好碰到了一个,以此与大家分享.</p>\n<h2>需求介绍</h2>\n<p>需求大概是这样的,不同的测试模式有不同的匹配规则,很明显测测试模式是一个枚举,问题是怎么把他和匹配规则联系起来。</p>\n<p>在有些时候我们需要枚举来区分出一些模式,同时每个模式都有自己的值.也就是说在使用的时候我们希望首先获取到这个枚举的值,然后通过枚举的值在获取的具体的属性的值.</p>\n<h2>实现1</h2>\n<p>一个可能的方式是使用<code class=\"language-text\">string enum</code>直接作为map来使用</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> TestMode <span class=\"token punctuation\">{</span>\n    AllTest<span class=\"token operator\">=</span><span class=\"token string\">\"*spec.ts\"</span><span class=\"token punctuation\">;</span>\n    UnitTest<span class=\"token operator\">=</span><span class=\"token string\">\"*.spec.ts\"</span><span class=\"token punctuation\">;</span>\n    IntegrationTest<span class=\"token operator\">=</span><span class=\"token string\">\"*.integration-test.spec.ts\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的一个问题是TestMode这个枚举所表达出的概念是枚举,简单的讲就是用来区分不同的TestMode,他的值确是具体的测试模式的pattern,这是一件比较奇怪的事情</p>\n<h2>实现2</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> TestMode <span class=\"token punctuation\">{</span>\n  AllTest <span class=\"token operator\">=</span> <span class=\"token string\">\"All\"</span><span class=\"token punctuation\">,</span>\n  UnitTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Unit\"</span><span class=\"token punctuation\">,</span>\n  IntegrationTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Integration\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TestModePatternMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  All<span class=\"token punctuation\">:</span> <span class=\"token string\">\"axxx\"</span><span class=\"token punctuation\">,</span>\n  Unit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"uxxxx\"</span><span class=\"token punctuation\">,</span>\n  Integration<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ixxxxx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> allTestPattern <span class=\"token operator\">=</span> TestModePatternMap<span class=\"token punctuation\">[</span>TestMode<span class=\"token punctuation\">.</span>AllTest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allTestPattern<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的一个问题是TestModePatternMap的类型是什么?就现在来讲的话他是<code class=\"language-text\">{[_:string]:string}</code>,当这并不是我们所期望的,TestModePatternMap的key不应当超出TestMode的取值。</p>\n<h2>实现3</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> TestMode <span class=\"token operator\">=</span> <span class=\"token string\">\"Unit\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Integration\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"All\"</span>\n\n<span class=\"token keyword\">const</span> TestModePatternMap<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> TestMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  All<span class=\"token punctuation\">:</span> <span class=\"token string\">\"axxx\"</span><span class=\"token punctuation\">,</span>\n  Unit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"uxxxx\"</span><span class=\"token punctuation\">,</span>\n  Integration<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ixxxxx\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>通过<code class=\"language-text\">union string</code>和对TestModePatternMap的类型加以限制我们便能够得尝所愿了</p>","fields":{"slug":"/tech-share/ts-enum-map-a-use-case-of-the-new-template-string-syntax/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"a20e76","time":"2020-12-02T09:18:27+08:00","tag":null},"parent":{"__typename":"File","name":"ts-enum-map-a-use-case-of-the-new-template-string-syntax","ext":".md","birthTime":"1970-01-01T00:00:00.000Z","changeTime":"2020-12-02T08:16:24.137Z","relativeDirectory":"tech-share","absolutePath":"/home/oaa/ns/share/blog/tech-share/ts-enum-map-a-use-case-of-the-new-template-string-syntax.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tech-share/ts-enum-map-a-use-case-of-the-new-template-string-syntax/","disqus":{"shortname":"woodgear-blog"}}}