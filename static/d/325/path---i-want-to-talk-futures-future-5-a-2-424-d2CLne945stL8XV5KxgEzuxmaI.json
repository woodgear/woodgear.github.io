{"data":{"markdownRemark":{"html":"<h1>什么是future</h1>\n<p>就我目前的理解来看future是一种新型的书写方式 传统的代码按照线性顺序执行 但是在异步程序中为了表明异步逻辑 最简单的就是嵌套回调 future也是类似 只不过是通过and_then等方法将异步逻辑组合了起来 一个future就是一条调用链 调用链与调用链之间可以进行组合 组成的就是一个更大的future 但是future也仅仅是future而已其只是通过通过另一种方式描述了将要做的事情 就像一个蓝图 还要一个执行者 这个执行者就是tokio 所提供的东西</p>\n<h1>park 是个什么概念</h1>\n<h1>how a task init?</h1>\n<h1>task 与thread是什么关系</h1>\n<h2>根据操作系统概念的划分我们能够知道process与thread的区别 能够去调用current<em>process and current</em>thread but how can we call something like task::current</h2>\n<h2>how task works</h2>\n<h2>Task::current的实现</h2>\n<pre><code class=\"language-rust\">pub fn current() -> Task {\n    with(|borrowed| {\n        let unpark = borrowed.unpark.to_owned();\n        let events = borrowed.events.to_owned();\n\n        Task {\n            id: borrowed.id,\n            unpark: unpark,\n            events: events,\n        }\n    })\n}\n</code></pre>\n<pre><code class=\"language-rust\">fn with&#x3C;F: FnOnce(&#x26;BorrowedTask) -> R, R>(f: F) -> R {\n    unsafe {\n        let task = get_ptr().expect(\"no Task is currently running\");\n        assert!(!task.is_null(), \"no Task is currently running\");\n        f(&#x26;*(task as *const BorrowedTask))\n    }\n}\n</code></pre>\n<pre><code class=\"language-rust\">static GET: AtomicUsize = ATOMIC_USIZE_INIT;\nstatic SET: AtomicUsize = ATOMIC_USIZE_INIT;\n\n#[inline]\npub fn get_ptr() -> Option&#x3C;*mut u8> {\n    match GET.load(Relaxed) {\n        0 => None,\n        n => Some(unsafe { mem::transmute::&#x3C;usize, fn() -> *mut u8>(n)() }),\n    }\n}\n</code></pre>\n<p>看起来GET 实质上是一个<code>fn() -> *mut u8</code>的函数指针 这个函数返回的是一个指向BorrowedTask的指针\n那么问题在于谁设置的这个指针呢 这个函数又是怎么实现的呢?(为什么要用指针啊 transmute真的安全吗? 2333)\n然后我就找到了注释</p>\n<pre><code class=\"language-rust\">/// Initialize the `futures` task system.\n///\n/// This function is an unsafe low-level implementation detail typically only\n/// used by crates using `futures` in `no_std` context. Users of this crate\n/// who also use the standard library never need to invoke this function.\n///\n/// The task system in the `futures` crate relies on some notion of \"local\n/// storage\" for the running thread and/or context. The `task::current` function\n/// can get invoked in any context, for example, and needs to be able to return\n/// a `Task`. Typically with the standard library this is supported with\n/// thread-local-storage, but this is not available in `no_std` contexts!\n///\n/// This function is provided to allow `no_std` contexts to continue to be able\n/// to use the standard task system in this crate. The functions provided here\n/// will be used as-if they were thread-local-storage getters/setters. The `get`\n/// function provided is used to retrieve the current thread-local value of the\n/// task system's pointer, returning null if not initialized. The `set` function\n/// updates the value of the pointer.\n///\n/// # Return value\n///\n/// This function will return whether initialization succeeded or not. This\n/// function can be called concurrently and only the first invocation will\n/// succeed. If `false` is returned then the `get` and `set` pointers provided\n/// were *not* registered for use with the task system, but if `true` was\n/// provided then they will be called when the task system is used.\n///\n/// Note that while safe to call concurrently it's recommended to still perform\n/// external synchronization when calling this function. This task system is\n/// not guaranteed to be ready to go until a call to this function returns\n/// `true`. In other words, if you call this function and see `false`, the\n/// task system may not be ready to go as another thread may still be calling\n/// `init`.\n///\n/// # Unsafety\n///\n/// This function is unsafe due to the requirements on the behavior of the\n/// `get` and `set` functions. The pointers returned from these functions must\n/// reflect the semantics specified above and must also be thread-local,\n/// depending on the definition of a \"thread\" in the calling context.\n</code></pre>\n<p>这个是std下的实现</p>\n<pre><code class=\"language-rust\">thread_local!(static CURRENT_TASK: Cell&#x3C;*mut u8> = Cell::new(ptr::null_mut()));\n\nstatic INIT: Once = ONCE_INIT;\n\npub fn get_ptr() -> Option&#x3C;*mut u8> {\n    // Since this condition will always return true when TLS task storage is\n    // used (the default), the branch predictor will be able to optimize the\n    // branching and a dynamic dispatch will be avoided, which makes the\n    // compiler happier.\n    if core::is_get_ptr(0x1) {\n        Some(CURRENT_TASK.with(|c| c.get()))\n    } else {\n        core::get_ptr()\n    }\n}\n</code></pre>\n<h2>这个CURRENT_TASK是怎么样设置进去的</h2>\n<p>看起来是下面这个函数设置的</p>\n<pre><code class=\"language-rust\">pub fn set&#x3C;'a, F, R>(task: &#x26;BorrowedTask&#x3C;'a>, f: F) -> R\n    where F: FnOnce() -> R\n{\n    // Lazily initialize the get / set ptrs\n    //\n    // Note that we won't actually use these functions ever, we'll instead be\n    // testing the pointer's value elsewhere and calling our own functions.\n    INIT.call_once(|| unsafe {\n        let get = mem::transmute::&#x3C;usize, _>(0x1);\n        let set = mem::transmute::&#x3C;usize, _>(0x2);\n        init(get, set);\n    });\n\n    // Same as above.\n    if core::is_get_ptr(0x1) {\n        struct Reset(*const Cell&#x3C;*mut u8>, *mut u8);\n\n        impl Drop for Reset {\n            #[inline]\n            fn drop(&#x26;mut self) {\n                unsafe {\n                    (*self.0).set(self.1);\n                }\n            }\n        }\n\n        unsafe {\n            let slot = tls_slot();\n            let _reset = Reset(slot, (*slot).get());\n            (*slot).set(task as *const _ as *mut u8);\n            f()\n        }\n    } else {\n        core::set(task, f)\n    }\n}\n</code></pre>\n<h2>谁 init/update/set CURRENT_TASK</h2>\n<h1>我们如何控制poll的频率 能不做到更精细的控制</h1>\n<h1>相关阅读</h1>\n<p><a href=\"https://users.rust-lang.org/t/how-futures-tasks-work-with-executors/11585/8\">how-futures-tasks-work-with-executors</a><br>\n<a href=\"https://www.reddit.com/r/rust/comments/73l6na/looking_into_the_future_a_post_explaining_how/\">looking<em>into</em>the<em>future</em>a<em>post</em>explaining_how</a>\n<a href=\"https://www.coredump.ch/2017/07/05/understanding-the-tokio-reactor-core/\">understanding-the-tokio-reactor-core</a></p>","frontmatter":{"title":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/I Want To Talk/futures/future/"}}