{"data":{"markdownRemark":{"html":"<p>所以实际上讲重新poll一次future实际上是重新clone一个task丢到task的调用队列中再调用一次?\n所以讲实际上根本不存在调用 所有的future poll完一遍又会被重新丢到队列中直到下次被poll?那这样的话不就相当于死循环吗?\n不是的 例如例子上的TimeFuture实际上是TimeFuture自己调用的wake</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> TimerFuture <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Create a new `TimerFuture` which will complete after the provided</span>\n    <span class=\"token comment\">/// timeout.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">:</span> Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> shared_state <span class=\"token operator\">=</span> Arc<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Mutex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>SharedState <span class=\"token punctuation\">{</span>\n            completed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n            waker<span class=\"token punctuation\">:</span> None<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TimerFuture new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Spawn the new thread</span>\n        <span class=\"token keyword\">let</span> thread_shared_state <span class=\"token operator\">=</span> shared_state<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TimerFuture start thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TimerFuture time consumed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> shared_state <span class=\"token operator\">=</span> thread_shared_state<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Signal that the timer has completed and wake up the last</span>\n            <span class=\"token comment\">// task on which the future was polled, if one exists.</span>\n            shared_state<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>waker<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>shared_state<span class=\"token punctuation\">.</span>waker <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TimeFuture state completed wakeup task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                waker<span class=\"token punctuation\">.</span><span class=\"token function\">wake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        TimerFuture <span class=\"token punctuation\">{</span> shared_state <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span> Wake <span class=\"token keyword\">for</span> Task <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">wake</span><span class=\"token punctuation\">(</span>arc_self<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Arc<span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Implement `wake` by sending this task back onto the task channel</span>\n        <span class=\"token comment\">// so that it will be polled again by the executor.</span>\n        <span class=\"token keyword\">let</span> cloned <span class=\"token operator\">=</span> arc_self<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arc_self<span class=\"token punctuation\">.</span>task_sender<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>cloned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"too many tasks queued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Executor <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute start to run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>ready_queue<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get a task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> future_slot <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Take the future, and if it has not yet completed (is still Some),</span>\n            <span class=\"token comment\">// poll it in an attempt to complete it.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> future<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> future_slot<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Create a `LocalWaker` from the task itself</span>\n                <span class=\"token keyword\">let</span> lw <span class=\"token operator\">=</span> <span class=\"token function\">local_waker_from_nonlocal</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> Poll<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Pending <span class=\"token operator\">=</span> Pin<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> future<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">dbg!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excuttor try to poll and task is pending restore the task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// We're not done processing the future, so put it</span>\n                    <span class=\"token comment\">// back in its task to be run again in the future.</span>\n                    <span class=\"token operator\">*</span>future_slot <span class=\"token operator\">=</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/talk/编程语言须知/rust/async_book/"}}