{"version":3,"sources":["webpack:///./src/utils/util.js","webpack:///./src/pages/index.js"],"names":["timeAgo","left","right","leftDate","Date","rightDate","getFullYear","data","月","getMonth","天","getDate","小时","getHours","分钟","getMinutes","Object","keys","key","Case","Article","assign","this","fromMarkDownNode","node","parent","name","birthTime","changeTime","directories","relativeDirectory","split","filter","s","length","parserNameAndCategory","frontmatter","title","category","err","console","error","fileName","frontmatterTitle","slice","renderIndexPage","articles","sort","l","r","l_time","create_time","r_time","e","map","article","createTime","timeDiff","util","id","to","fields","slug","css","className","join","query","allArticles","allMarkdownRemark","edges"],"mappings":"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","file":"component---src-pages-index-js-a65131c0d302e6e41164.js","sourcesContent":["function timeAgo(left, right) {\n  const leftDate = new Date(left)\n  const rightDate = new Date(right)\n  if (leftDate.getFullYear() !== rightDate.getFullYear()) {\n    return left\n  }\n\n  const data = {\n    月: [leftDate.getMonth() + 1, rightDate.getMonth() + 1],\n    天: [leftDate.getDate(), rightDate.getDate()],\n    小时: [leftDate.getHours(), rightDate.getHours()],\n    分钟: [leftDate.getMinutes(), rightDate.getMinutes()],\n  }\n  for (let key of Object.keys(data)) {\n    const Case = data[key]\n    if (Case[0] !== Case[1]) {\n      return `${Case[1] - Case[0]}${key}前`\n    }\n  }\n  return \"1分钟内\"\n}\n\nexport default { timeAgo }\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport Layout from \"../components/layout\"\nimport util from \"../utils/util\"\nclass Article {\n  constructor(data) {\n    Object.assign(this, data)\n  }\n\n  static fromMarkDownNode(node) {\n    const { name, birthTime, changeTime, relativeDirectory } = node.parent\n    const directories =\n      relativeDirectory.split(\"\\\\\").filter(s => s.length) || []\n    const [title, category, err] = Article.parserNameAndCategory(\n      directories,\n      name,\n      node.frontmatter.title\n    )\n    if (err) {\n      console.error(\"fromMarkDownNode fail\", node, err)\n      return [null, \"fromMarkDownNode fail\"]\n    }\n    return [new Article({ title, category, birthTime, changeTime, node }), null]\n  }\n\n  /*  \n  directories:Vec<NotEmptyString>\n  filenName:NotEmptyString,\n  frontmatterTitle:Option<NotEmptyString>\n  */\n\n  // why i use go err handle? why? T_T\n  static parserNameAndCategory(directories, fileName, frontmatterTitle) {\n    if (!fileName || fileName.length === 0) {\n      return [null, null, \"fileName could not be empty\"]\n    }\n    if (directories.length === 0 && fileName === \"main\") {\n      return [\n        null,\n        null,\n        \"fileName could not be main when this file under root dir\",\n      ]\n    }\n\n    let title = null\n    let category = []\n    if (directories.length === 0) {\n      title = fileName\n      category = []\n    } else if (\n      directories[directories.length - 1] === fileName ||\n      fileName === \"main\"\n    ) {\n      title = directories[directories.length - 1]\n      category = directories.slice(0, -1)\n    } else {\n      title = fileName\n      category = directories\n    }\n    if (frontmatterTitle) {\n      title = frontmatterTitle\n    }\n    return [title, category, null]\n  }\n\n  static renderIndexPage(data) {\n    const articles = data.sort(\n      (l, r) => {\n        try {\n          let l_time = l.node.frontmatter.create_time;\n          let r_time = r.node.frontmatter.create_time;\n          return new Date(r_time) - new Date(l_time)\n        }catch(e) {\n          return new Date(r.changeTime) - new Date(l.changeTime)\n        }        \n      }\n    );\n\n    return (\n      <Layout>\n        <div>\n          <h4>{articles.length} Posts</h4>\n          {articles.map(article => {\n            let createTime = new Date();\n            try {\n              createTime = article.node.frontmatter.create_time;\n            } catch (error) {\n              createTime = article.changeTime;\n            }\n\n            const timeDiff =  util.timeAgo(createTime, new Date());\n            return (\n              <div key={article.node.id}>\n                <Link\n                  to={article.node.fields.slug}\n                  css={css`\n                    text-decoration: none;\n                  `}\n                >\n                  <div\n                    className=\"article\"\n                    css={css`\n                      margin-bottom: 10px;\n                    `}\n                  >\n                    <div\n                      className=\"category\"\n                      css={css`\n                        color: black;\n                      `}\n                    >\n                      category: {article.category.join(\"->\")}\n                    </div>\n                    <div className=\"title\">\n                      <span\n                        css={css`\n                          font-size: 150%;\n                        `}\n                      >\n                        {article.title}\n                      </span>\n                      -\n                      <span\n                        css={css`\n                          font-size: 100%;\n                        `}\n                      >\n                        {timeDiff}\n                      </span>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n            )\n          })}\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default ({ data }) => {\n  const allArticles = data.allMarkdownRemark.edges\n    .map(({ node }) => Article.fromMarkDownNode(node))\n    .filter(([article, err]) => !err)\n    .map(([article, err]) => article)\n  return Article.renderIndexPage(allArticles)\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tag,\n            id,\n            create_time,\n          }\n\n          parent {\n            ... on File {\n              name\n              ext\n              birthTime\n              changeTime\n              relativeDirectory\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}