{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/relation-database-and-tree-like-struct-query/","result":{"data":{"markdownRemark":{"html":"<h1>Mysql 树形结构查询</h1>\n<h1>对于树执行的操作</h1>\n<ul>\n<li>区间查询 给定父节点 查询所有子节点(所有)</li>\n<li>给定子节点查询父节点</li>\n<li>给定父节点查询 单层子节点(儿子)</li>\n</ul>\n<h2>邻接表模型(adjacency list)</h2>\n<p>adjacency list 简单的讲就是通过id 和parent来维护父子关系 root元素的parent为null</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> category<span class=\"token punctuation\">(</span>\nid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\nparent <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>adjacency list 的查询通过嵌套的子查询语句组成 每层嵌套查询出当前id的所有1级子元素</p>\n<h2>Nested Set Model</h2>\n<p>通过维护左右两个区间来维护 父子关系\n查询子元素 只要比较 元素的左右区间是否在父元素上即可\n与adjacency list 的区别最大就是通过两个区间 提供足够的信息 使得我们能够直接判断出 元素是否为另一元素的子元素.\nadjacency list 不能直接做到这一点 因为子节点还可以有子节点 而adjacency list只是通过parent维护了直系关系</p>\n<p>Nested Set 的缺点是增加node时要关系其他节点的区间 本质原因是Nested Set使用来区间的概念 而区间是映射到数字上 固定分配的 你没法在1-2直接插入第三个值</p>\n<h1>参考文档</h1>","fields":{"slug":"/share/relation-database-and-tree-like-struct-query/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"jqapm5l","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"relation-database-and-tree-like-struct-query","ext":".md","birthTime":"2020-03-21T15:26:08.513Z","changeTime":"2020-08-17T01:18:01.343Z","relativeDirectory":"share","absolutePath":"C:/Users/18754/ns/share/blog/share/relation-database-and-tree-like-struct-query.md"}}},"pageContext":{"slug":"/share/relation-database-and-tree-like-struct-query/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}