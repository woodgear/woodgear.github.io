{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/actix/actix/","result":{"data":{"markdownRemark":{"html":"<h1>为什么能够通过addres 来send msg</h1>\n<p>contextimpl 中的poll中执行力self.mailbox.poll(self,act) 其中一直在读msg然后执行msg的handle方法 实际上就接收到了Msg\n每个addres 通过Arc共享一份内存一直在push msg</p>\n<h1>AddressSenderProducter的Send方法在做什么?</h1>\n<p>递增num_senders并构造AddressSender\n只不过多线程问题 所以用了原子类型操作而已</p>\n<h1>task current 在做什么</h1>\n<p>目前acti使用的时future 1.0 + tokio 1.x 并没有搞懂里面具体的逻辑 不过大意就是获得了一个当前线程的waker 以便在后面通过notify通知到对应的actor 可以参照 <a href=\"../aync_book\">rust async book</a>中的例子就懂了</p>\n<h1>当Actor启动时发生了什么</h1>\n<p>如actix.pdf</p>\n<h1>当我们在Handle Msg 时通过ctx 自己给自己notify 一个msg时 我们做了什么</h1>\n<p>类似于此的函数实质就是直接调用spawn</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\">    <span class=\"token comment\">/// Sends the message `msg` to self.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">:</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Handler</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">M</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">ActorState</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Stopped</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Context::notify called for stopped actor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActorMessageItem</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">notify_later</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">:</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">SpawnHandle</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Handler</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">M</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">ActorState</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Stopped</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">error!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Context::notify_later called for stopped actor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">SpawnHandle</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActorDelayedMessageItem</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run_later</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> dur<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">SpawnHandle</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnOnce</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimerFunc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>dur<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Spawns a job to execute the given closure periodically, at a</span>\n    <span class=\"token comment\">/// specified fixed interval.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run_interval</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> dur<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">SpawnHandle</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">FnMut</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntervalFunc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>dur<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>至于spawn 本身则是将这个这个future丢到了contextimpl的items中可以参见ContextFut的poll 这里又去poll了self.items实际上就是执行了一下这些fututre</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\">    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token comment\">/// Spawn new future to this context.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">spawn</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> fut<span class=\"token punctuation\">:</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">SpawnHandle</span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">F</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ActorFuture</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Actor</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'static</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>handles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>handles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> fut<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ActorFuture</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Actor</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">A</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>fut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> fut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handle\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>当我们获得一个actor的address 并通过这个address send一个msg时 我们做了什么</h1>\n<p>每一个Actor的address实际上共享一个队列 send msg 时实际上就是将msg丢到Actor的message_queue中并且去notify这个Actor</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">AddressSender</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    inner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Inner</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 省略</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span> <span class=\"token class-name\">AddressSender</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">send</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">:</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Receiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SendError</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">>></span>\n    <span class=\"token keyword\">where</span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Handler</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ToEnvelope</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">M</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Send</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">M</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Message</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">poll_unparked</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_ready</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Full</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> park_self <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">inc_num_messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>park_self<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> park_self<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SendError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Closed</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> park_self <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">sync_channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> env <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ToEnvelope</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">M</span><span class=\"token operator\">>></span><span class=\"token punctuation\">::</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">queue_push_and_signal</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>rx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">queue_push_and_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Envelope</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>message_queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> recv_task <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>recv_task<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> recv_task<span class=\"token punctuation\">.</span>unparked <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            recv_task<span class=\"token punctuation\">.</span>unparked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            recv_task<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> task <span class=\"token punctuation\">{</span>\n            task<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>剩下的问题就是address是怎么来的</p>\n<ol>\n<li>Actor启动时返回的Address</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token class-name\">Context</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Context</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Self</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">pub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">crate</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Context</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mb <span class=\"token operator\">=</span> <span class=\"token class-name\">Mailbox</span><span class=\"token punctuation\">::</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">{</span>\n            parts<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ContextParts</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>mb<span class=\"token punctuation\">.</span><span class=\"token function\">sender_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            mb<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>mb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">:</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Addr</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> fut <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">into_future</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> addr <span class=\"token operator\">=</span> fut<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arbiter</span><span class=\"token punctuation\">::</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>fut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        addr\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token operator\">></span> <span class=\"token class-name\">ContextFut</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AsyncContextParts</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Context</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">address</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Addr</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mailbox<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token class-name\">Mailbox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AsyncContext</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">address</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Addr</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Addr</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>msgs<span class=\"token punctuation\">.</span><span class=\"token function\">sender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>问题就是MailBox的msgs到底是什么</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token class-name\">Default</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Mailbox</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">A</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AsyncContext</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> rx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">channel<span class=\"token punctuation\">::</span></span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mailbox</span> <span class=\"token punctuation\">{</span> msgs<span class=\"token punctuation\">:</span> rx <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>channel又是一个很麻烦的东西</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">channel</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AddressSender</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AddressReceiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Check that the requested buffer size does not exceed the maximum buffer</span>\n    <span class=\"token comment\">// size permitted by the system.</span>\n    <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAX_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"requested buffer size too large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> inner <span class=\"token operator\">=</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">{</span>\n        buffer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AtomicUsize</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AtomicUsize</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INIT_STATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        message_queue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        parked_queue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        num_senders<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AtomicUsize</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        recv_task<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReceiverTask</span> <span class=\"token punctuation\">{</span>\n            unparked<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            task<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> tx <span class=\"token operator\">=</span> <span class=\"token class-name\">AddressSender</span> <span class=\"token punctuation\">{</span>\n        inner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        sender_task<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SenderTask</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        maybe_parked<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AtomicBool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> rx <span class=\"token operator\">=</span> <span class=\"token class-name\">AddressReceiver</span> <span class=\"token punctuation\">{</span> inner <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> rx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这里我们可以看到Inner终于被创建出来的 下面的无论是sender 还是sender_producer 实质上使用的都是同一份inner 也就是说通过Actor的address() 就能够将Msg丢到Actor的MailBox中这样在Actor被poll时他就会通过self.mailbox.poll()来调用真正的处理函数</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span> <span class=\"token class-name\">AddressReceiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sender</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AddressSender</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// this code same as Sender::clone</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>num_senders<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SeqCst</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the maximum number of senders has been reached, then fail</span>\n            <span class=\"token keyword\">if</span> curr <span class=\"token operator\">==</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span><span class=\"token function\">max_senders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot clone `Sender` -- too many outstanding senders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> curr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> actual <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>num_senders<span class=\"token punctuation\">.</span><span class=\"token function\">compare_and_swap</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeqCst</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// The ABA problem doesn't matter here. We only care that the</span>\n            <span class=\"token comment\">// number of senders never exceeds the maximum.</span>\n            <span class=\"token keyword\">if</span> actual <span class=\"token operator\">==</span> curr <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">AddressSender</span> <span class=\"token punctuation\">{</span>\n                    inner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    sender_task<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mutex</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SenderTask</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    maybe_parked<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Arc</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AtomicBool</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            curr <span class=\"token operator\">=</span> actual<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Creates the sender producer.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sender_producer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">AddressSenderProducer</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AddressSenderProducer</span> <span class=\"token punctuation\">{</span>\n            inner<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n## <span class=\"token class-name\">ReceiverTask</span> 中的task什么时候被设置进去的\n初始化时为none在<span class=\"token class-name\">AddressReceiver</span>被poll时 <span class=\"token punctuation\">(</span>mailbox被poll时<span class=\"token punctuation\">)</span> 的try_park中被设置\n也就是在<span class=\"token class-name\">Actor</span>第一次被<span class=\"token class-name\">Poll</span>时设置 也就是<span class=\"token class-name\">Arbiter</span><span class=\"token punctuation\">::</span>spawn时被设置\n```rust\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span> <span class=\"token class-name\">Stream</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">AddressReceiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Item</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Envelope</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Poll</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Item</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Try to read a message off of the message queue.</span>\n            <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">next_message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> msg<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotReady</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// There are no messages to read, in this case, attempt to</span>\n                    <span class=\"token comment\">// park. The act of parking will verify that the channel is</span>\n                    <span class=\"token comment\">// still empty after the park operation has completed.</span>\n                    <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">try_park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">TryPark</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Parked</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// The task was parked, and the channel is still</span>\n                            <span class=\"token comment\">// empty, return NotReady.</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotReady</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token class-name\">TryPark</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotEmpty</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// A message has been sent while attempting to</span>\n                            <span class=\"token comment\">// park. Loop again, the next iteration is</span>\n                            <span class=\"token comment\">// guaranteed to get the message.</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// If there are any parked task handles in the parked queue, pop</span>\n            <span class=\"token comment\">// one and unpark it.</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Decrement number of messages</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">dec_num_messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Return the message</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Async</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Ready</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">></span> <span class=\"token class-name\">AddressReceiver</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">try_park</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">TryPark</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// First, track the task in the `recv_task` slot</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> recv_task <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>recv_task<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> recv_task<span class=\"token punctuation\">.</span>unparked <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Consume the `unpark` signal without actually parking</span>\n            recv_task<span class=\"token punctuation\">.</span>unparked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">TryPark</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotEmpty</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        recv_task<span class=\"token punctuation\">.</span>task <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">task<span class=\"token punctuation\">::</span></span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TryPark</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Parked</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>至此一切就已经联系起来了\n当我们向adr中send msg 时实际上在向这个Actor的mailbox中的message_queue中推Envelope </p>\n<p>并且notify下Actor的Task因为Actor的第一次被poll就会设置task所以send了一个msg时能够找到Actor的task并去notify他</p>\n<h1>为什么Actor启动必须要System?</h1>\n<h1>Service 是如何工作的</h1>\n<h1>如何将Actor启动在不同的线程中</h1>\n<h1>当某个Actor阻塞时 之前在其中设置的Timer会有什么样的表现行为 为什么</h1>","fields":{"slug":"/share/actix/actix/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"up0qo0g","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"actix","ext":".md","birthTime":"2020-03-21T15:26:05.660Z","changeTime":"2020-08-17T01:18:42.821Z","relativeDirectory":"share/actix","absolutePath":"C:/Users/18754/ns/share/blog/share/actix/actix.md"}}},"pageContext":{"slug":"/share/actix/actix/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}