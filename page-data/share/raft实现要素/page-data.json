{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/raft实现要素/","result":{"data":{"markdownRemark":{"html":"<h2>追求性能</h2>\n<p>追求性能的方式实际上是</p>\n<ol>\n<li>从业务的角度将所有能并行的逻辑并行 不过这里要考虑Amdahl定律和并行本身会带来的性能和理解成本</li>\n<li>异步 绝对不要阻塞 最大化的利用CPU</li>\n<li>\n<p>从业务的角度 减少要处理的业务 即优化流程 </p>\n<h3>raft性能优化手段</h3>\n</li>\n<li>ReadIndex (业务)</li>\n<li>batching pipe (流量塑型)</li>\n</ol>\n<h2>信息交换</h2>\n<p>这里我们关注于通过msg的交互 raft的node从中获取到了什么信息</p>\n<h3>心跳</h3>\n<p>心跳实际上是empty的AppendEntries 从etcd/raft-rs的实现看\nRequest 标识的是leader的commit和commit Response标识的是follower的term 是commit更新的手段</p>\n<h2>commit 传播</h2>\n<h2>log-replcation 传播</h2>","fields":{"slug":"/share/raft实现要素/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"1e03ace","time":"2020-08-12T10:40:53.000Z","tag":null},"parent":{"__typename":"File","name":"raft实现要素","ext":".md","birthTime":"2020-08-17T01:17:46.521Z","changeTime":"2020-08-20T02:39:26.091Z","relativeDirectory":"share","absolutePath":"C:/Users/18754/ns/share/blog/share/raft实现要素.md"}}},"pageContext":{"slug":"/share/raft实现要素/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}