{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/从流中解出数据/","result":{"data":{"markdownRemark":{"html":"<h1>从流中解出树</h1>\n<p>现使用SAX解析xml生成了一系列的event(流)如何从这些event中解出dom(数据)?</p>\n<p>xml如下</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginA</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Policy</span><span class=\"token punctuation\">></span></span>testA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Policy</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginA</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginB</span><span class=\"token punctuation\">></span></span>testB<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginB</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>生成的event如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Policy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>问题在于树状结构是嵌套的 将其拍平之后才能流式的发送 为了从流中解出树 我们必须维护这种嵌套关系</p>\n<p>这应当是个栈的结构 每次遇到Start创建一个对象 把此对象引用放到栈顶对象的child中 此对象入栈 End出栈 栈中的最后一个元素即为想要的结构</p>\n<p>本质上将是维护了一个引用的队列</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> expect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> attribute</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attribute <span class=\"token operator\">=</span> attribute <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">End</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> tagName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attribute <span class=\"token operator\">=</span> attribute <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> child <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Handle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> attribute</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//first element</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">trans</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">events</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> event <span class=\"token keyword\">of</span> events<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ele<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ele<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ele<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ele<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Trans'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> MockEvents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Policy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Policy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">End</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should ok'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> expectRes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginA'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Policy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'testA'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pluginB'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'testB'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">trans</span><span class=\"token punctuation\">(</span>MockEvents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>expectRes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>从流中聚合数据</h1>\n<h2>差速器</h2>\n<p>假设有一个流 元素为某种含有时间值的对象 现在我们希望指定一个时间访问将其聚合</p>\n<p>如同差速器一样 我们只要知道 </p>\n<ol>\n<li>当前的元素是否足够和之前元素组合起来一起被聚合 </li>\n<li>\n<p>给定固定长度的元素如何将其聚合起来</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">//差速器</span>\n<span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>        \n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data_source<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//没有后续 直接聚合</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode_eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//decoder 可能聚合出数据 此时直接返回 </span>\n<span class=\"token comment\">//        也可能还需要更多的数据 即再走一遍循环</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>framed_item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>framed_item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>RX-RUST</h2>\n<p>reactive like impl</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>marker<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>PhantomData<span class=\"token punctuation\">,</span> Sized<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>Duration<span class=\"token punctuation\">,</span> Instant<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n</ol>\n<p>pub trait DataSource: Iterator\nwhere\nSelf: Sized,\n{\nfn buffer<em>time<T>(\nself,\ntime: Duration,\n) -> BufferWhenObservable1&#x3C;Self, Self::Item, TimedDecoder&#x3C;Self::Item>>\nwhere\nT: Clone,\nSelf: Iterator&#x3C;Item = T>,\nSelf: Sized,\n{\nself.buffer</em>when(TimedDecoder::new(time))\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">fn buffer_when&lt;P&gt;(self, picker: P) -&gt; BufferWhenObservable1&lt;Self, Self::Item, P&gt;\nwhere\n    Self: Sized,\n    P: StreamPicker&lt;Item = Self::Item&gt;,\n{\n    return BufferWhenObservable1::new(self, picker);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</p>\n<p>pub enum BufferWhenState {\nContinueAndTakeThis,\nContinueAndDropThis,\nEndAndTakeThis,\nEndAndLeftThis,\n}</p>\n<p>trait StreamPicker {\ntype Item;\nfn pick(&#x26;mut self, item: &#x26;Option&#x3C;Self::Item>) -> BufferWhenState;\nfn clean(&#x26;mut self);\n}</p>\n<h1>[derive(Clone)]</h1>\n<p>pub struct TimedDecoder<T> {\nstart: Option<Instant>,\ntime<em>range: Duration,\n_type</em>place_hoder: PhantomData<T>,\n}</p>\n<p>impl<T> TimedDecoder<T> {\nfn new(time<em>range: Duration) -> Self {\nSelf {\nstart: None,\ntime</em>range,\n<em>type</em>place_hoder: Default::default(),\n}\n}\n}</p>\n<p>impl<T> StreamPicker for TimedDecoder<T> {\ntype Item = T;\nfn clean(&#x26;mut self) {\nself.start = None;\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">fn pick(&amp;mut self, item: &amp;Option&lt;T&gt;) -&gt; BufferWhenState {\n    if self.start.is_none() {\n        self.start = Some(Instant::now());\n    }\n\n    if item.is_none() {\n        return BufferWhenState::EndAndTakeThis;\n    }\n\n    if let Some(start) = self.start {\n        if start.elapsed() &lt; self.time_range {\n            return BufferWhenState::ContinueAndTakeThis;\n        }\n        return BufferWhenState::EndAndLeftThis;\n    }\n\n    unreachable!()\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</p>\n<p>pub struct BufferWhenObservable1&#x3C;D, T, P> {\ndata_source: D,\ncache: Vec<T>,\npicker: P,\n}</p>\n<p>impl&#x3C;D, T, P> BufferWhenObservable1&#x3C;D, T, P> {\nfn new(data<em>souce: D, picker: P) -> Self\nwhere\nP: StreamPicker&#x3C;Item = T>,\n{\nSelf {\ndata</em>source: data_souce,\ncache: vec![],\npicker,\n}\n}\n}</p>\n<p>impl&#x3C;D, T, P> Iterator for BufferWhenObservable1&#x3C;D, T, P>\nwhere\nD: DataSource&#x3C;Item = T>,\nP: StreamPicker&#x3C;Item = T>,\n{\ntype Item = Vec<T>;\nfn next(&#x26;mut self) -> Option&#x3C;Self::Item> {\nlet mut picker = &#x26;mut self.picker;\npicker.clean(); //TODO some werid\nloop {\nlet next = self.data_source.next();\nmatch picker.pick(&#x26;next) {\nBufferWhenState::ContinueAndTakeThis => {\nif let Some(next) = next {\nself.cache.push(next);\n}\n}\nBufferWhenState::ContinueAndDropThis => {}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">            BufferWhenState::EndAndTakeThis =&gt; {\n                if let Some(next) = next {\n                    self.cache.push(next);\n                }\n                if self.cache.is_empty() {\n                    return None;\n                }\n                let ret = self.cache.drain(0..).collect();\n                return Some(ret);\n            }\n\n            BufferWhenState::EndAndLeftThis =&gt; {\n                let ret = self.cache.drain(0..).collect();\n                if let Some(next) = next {\n                    self.cache.push(next);\n                }\n                if self.cache.is_empty() {\n                    return None;\n                }\n                return Some(ret);\n            }\n        }\n    }\n    unreachable!()\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</p>\n<h1>[cfg(test)]</h1>\n<p>mod tests {\nuse super::*;\nuse std::collections::VecDeque;\nuse std::thread;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#[derive(Debug, Clone, Eq, PartialEq)]\nstruct MockData(u64, String);\n\n#[derive(Debug, Eq, PartialEq)]\nstruct TimedVec(VecDeque&lt;MockData&gt;);\n\nimpl DataSource for TimedVec {}\n\nimpl Iterator for TimedVec {\n    type Item = MockData;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if let Some(ret) = self.0.pop_front() {\n            thread::sleep(Duration::from_millis(ret.0));\n            return Some(ret);\n        }\n        return None;\n    }\n}\n\n#[test]\nfn test_rx_buffer_time() {\n    let list = TimedVec(VecDeque::from(vec![\n        MockData(10, &quot;1&quot;.to_string()),\n        MockData(10, &quot;2&quot;.to_string()),\n        MockData(10, &quot;3&quot;.to_string()),\n    ]));\n    let out: Vec&lt;Vec&lt;MockData&gt;&gt; = list.buffer_time(Duration::from_millis(20)).collect();\n    let expect_out = vec![\n        vec![MockData(10, &quot;1&quot;.to_owned()), MockData(10, &quot;2&quot;.to_owned())],\n        vec![MockData(10, &quot;3&quot;.to_owned())],\n    ];\n    assert_eq!(out, expect_out);\n}\n\n#[test]\nfn test_rx_buffer_when() {\n    let list = TimedVec(VecDeque::from(vec![\n        MockData(10, &quot;1&quot;.to_string()),\n        MockData(10, &quot;2&quot;.to_string()),\n        MockData(10, &quot;3&quot;.to_string()),\n        MockData(10, &quot;4&quot;.to_string()),\n    ]));\n\n    // let frame = TimedDecoder::\n    let out = list.buffer_when(TimedDecoder::new(Duration::from_millis(20)));\n    let out: Vec&lt;Vec&lt;MockData&gt;&gt; = out.collect();\n    let expect_out = vec![\n        vec![MockData(10, &quot;1&quot;.to_owned()), MockData(10, &quot;2&quot;.to_owned())],\n        vec![MockData(10, &quot;3&quot;.to_owned()), MockData(10, &quot;4&quot;.to_owned())],\n    ];\n    assert_eq!(out, expect_out);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>"}},"pageContext":{"slug":"/share/从流中解出数据/"}}}