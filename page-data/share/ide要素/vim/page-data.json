{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/ide要素/vim/","result":{"data":{"markdownRemark":{"html":"<h1>l-config</h1>\n<p>一般来讲是 ~/.vimrc\n在vim中可以通过 <code class=\"language-text\">:e $MYVIMRC</code> 来快速打开</p>\n<h1>mutli line edit</h1>\n<p>visual block Practical vim p42 用面向列的可视模式编辑表格数据\nctrl+v 进入面向列的可视模式\nc 编辑列 esc 应用编辑\nc:删除并进入插入模式\n插入操作看起来只影响顶行 但实际上影响所有行 只有等到返回普通模式时才真正显示操作结果(这种怪异的现象的原因很简单 vim没有实现好而已)\n实际上当用ctrl+v进入到可视模式时实际上还是普通模式可以用x . 等命令</p>\n<h1>多文件编辑</h1>\n<p>vsp 与sp</p>\n<h1>surround</h1>\n<p>install vim-surround</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">yss&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>jump to line end</h1>\n<p>use <code class=\"language-text\">$</code></p>\n<h1>replace only visual area (mutli line)</h1>\n<p>into visual mode select txt and enter ':' it will show <code class=\"language-text\">&#39;&lt;,&#39;&gt;</code> then just use <code class=\"language-text\">s/xx/xxx/g</code> pattern</p>\n<h1>replace only visual area (part of line)</h1>\n<p>not a elegant way\n[]</p>\n<h1>plugin manager</h1>\n<p><a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a></p>\n<h2>install</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"># vim\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n# nvim \ncurl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>vim termimal mode</h1>\n<h2>exit</h2>\n<p>c+\\c+n</p>\n<h1>vim delete all content under a bracket</h1>\n<h2>1 ]}</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{ _\n    {\n        ddddddd\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">d]} # ] ]x goto unmatched x</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>i} i) a} a) etc</h1>\n<p>i} \"inner Block\", select [count] Blocks, from \"[count] [{\"to the matching '}', excluding the '{' and '}'</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">di}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>居中</h1>\n<p>zz</p>\n<h1>split windows</h1>\n<h2>split new window edit same file</h2>\n<p>ctrl+w+v</p>\n<h1>将多行文本加上\"</h1>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-vim line-numbers\"><code class=\"language-vim\"><span class=\"token comment\">\" first use vim-surround to surround one line</span>\nyss<span class=\"token comment\">\"</span>\n<span class=\"token comment\">\" then use norm command to apply this behavior in mutli line</span>\n<span class=\"token punctuation\">:</span><span class=\"token operator\">.</span><span class=\"token punctuation\">,</span>$ norm <span class=\"token operator\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>批量生成数字</h1>\n<p>例如生成'vec![\"xxx 1\".to_string(),\"xxx2\".to_string()]'</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-vim line-numbers\"><code class=\"language-vim\"><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">rage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> |<span class=\"token keyword\">put</span> <span class=\"token operator\">=</span><span class=\"token string\">'\\\"xxx '</span><span class=\"token operator\">.</span>i<span class=\"token operator\">.</span><span class=\"token string\">'\\\".to_string(),'</span>|<span class=\"token keyword\">endfor</span>\n<span class=\"token punctuation\">:</span><span class=\"token operator\">.</span><span class=\"token punctuation\">,</span><span class=\"token operator\">.</span><span class=\"token operator\">+</span><span class=\"token number\">10</span> s<span class=\"token operator\">/</span>\\<span class=\"token keyword\">n</span><span class=\"token operator\">/</span><span class=\"token punctuation\">,</span><span class=\"token operator\">/</span>g</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h1>jump to previous location</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">mi // 给当前位置打上i标记\n`i // 跳转到 i标记位置\n`` //跳转到之前位置</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>对于一段选定的文本的每一行 执行相同的操作</h1>\n<ol>\n<li>qx  录制宏 </li>\n<li>\n<p>visual select :`&#x3C;> normal @x # 对选择的每一行执行宏</p>\n<h1>l-move</h1>\n<h2>l-basic-delete-util-and-not-include</h2>\n<p>dtx</p>\n<h2>l-basic-delete-util-and-include</h2>\n<p>dfx\n上\n下\n左\n右\n左边一个单词\n右边一个单词\n当前行行首\n当前行行末\n整个文件开始\n整个文件结束\n跳转到行号</p>\n</li>\n</ol>\n<h1>vim regex</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"># capture group 使用\\(\\)来包裹 replace 的时候使用\\1\ninfo!(&quot;hello&quot;);\n:s/info\\(.*\\)/println\\1\nprintln!(&quot;hello&quot;);\n# 换行使用\\r\nabc\n:s/abc/123\\r123\\r/g\n123\n123</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>实战case</h1>\n<h2>将选中文字作为输入传递给外部命令</h2>\n<p><a href=\"https://benninger.ca/posts/vim-use-selected-text-as-input-to-a-shell-command/\">https://benninger.ca/posts/vim-use-selected-text-as-input-to-a-shell-command/</a></p>\n<h2>隔行复制</h2>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-txt line-numbers\"><code class=\"language-txt\">sh 1.sh\nsh 1.sh\nsh 1.sh\nsh 1.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-editor-select</h1>\n<h2>基于锚点的选择</h2>\n<h3>行号</h3>\n<p>行号 选择当前行到某一特殊行</p>\n<ol>\n<li>首先进入select-mode</li>\n<li>使用xxG跳转到期望的行号\n<a href=\"https://unix.stackexchange.com/a/30056\"></a> </li>\n</ol>\n<h1>scope-select</h1>\n<h2>选中当前行</h2>\n<h1>regex</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">:8,10 s/search/replace/g</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>tips</h2>\n<p>set incsearch\ncapture group 需要转义\n<code class=\"language-text\">s/^\\(.*\\)$</code></p>\n<h1>jump-to-next-current-word</h1>\n<p><a href=\"https://stackoverflow.com/questions/10010392/go-to-the-next-same-word-in-vim-without-using-search\">go-to-the-next-same-word-in-vim-without-using-search</a>\n使用<code class=\"language-text\">*</code></p>\n<h1>copy-to-line-end-without-newline</h1>","fields":{"slug":"/share/ide要素/vim/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"d4iaol0","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"vim","ext":".md","birthTime":"2020-06-08T14:42:38.839Z","changeTime":"2020-09-18T08:55:45.341Z","relativeDirectory":"share/ide要素","absolutePath":"C:/Users/18754/ns/share/blog/share/ide要素/vim.md"}}},"pageContext":{"slug":"/share/ide要素/vim/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}