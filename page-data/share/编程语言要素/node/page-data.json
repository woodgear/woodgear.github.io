{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/编程语言要素/node/","result":{"data":{"markdownRemark":{"html":"<h1>registry</h1>\n<p>npm config set registry <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a>\nnpm config get registry</p>\n<h1>std</h1>\n<h2>list</h2>\n<h3>concat</h3>\n<h4>return new array</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> c<span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>http client</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">//npm install axios</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get_raw_html</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> raw <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> raw<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-string-format</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<h1>test framework</h1>\n<h2>mocha</h2>\n<h2>l-access-nest-object</h2>\n<p>乞丐版</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  p<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>xs <span class=\"token operator\">&amp;&amp;</span> xs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> xs<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> comments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Good one!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Interesting...'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">,</span> comments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Ok'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Baz'</span><span class=\"token punctuation\">,</span> comments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// let's pass in our props object...</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'comments'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ 'Good one!', 'Interesting...' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'comments'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// null</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1><a href=\"https://ramda.cn/\">ramda</a></h1>\n<h1>l-io</h1>\n<h2>l-io-file-to</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-file.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>iter-of-object</h1>\n<div class=\"gatsby-highlight\" data-language=\"node\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-node line-numbers\"><code class=\"language-node\">const a = {\n  &quot;a&quot;:{&quot;a&quot;:&quot;a&quot;,&quot;b&quot;:&quot;b&quot;},\n  &quot;b&quot;:{&quot;a&quot;:&quot;a&quot;,&quot;b&quot;:&quot;b&quot;}\n\n}\nfor (const [i1,i2] of Object.entries(a)) {\n  const {a,b}=i2\n  console.log(i1,a,b)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-string-format</h1>\n<h2>js-tagged-templates</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">mdn Template_literals</a>\n但我们在写形如<code class=\"language-text\">xxx${a}</code>的时候我实际上要求的语义是将\"xxx\"+a,这是JS默认提供的语义,tagged-templates就是提供让我们能够自定义语义的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> personExp<span class=\"token punctuation\">,</span> ageExp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> str0 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"That \"</span>\n  <span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" is a \"</span>\n  <span class=\"token keyword\">let</span> ageStr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ageExp <span class=\"token operator\">></span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'centenarian'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'youngster'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// We can even return a string built using a template literal</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str0<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>personExp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ageStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> myTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">That </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> person <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// That Mike is a youngster</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>更高阶的姿势实际上是说tagged-templates实质上是一个接受strings,和key的函数.strings和key正好的是一个接着一个的string[0]key[0]strings[1]key[1]这种,基于这种特性我们可以通过闭包(return 函数)来捕获更多的参数,来做更多的format的操作</p>","fields":{"slug":"/share/编程语言要素/node/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"8zi4vqf","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"node","ext":".md","birthTime":"2020-06-08T14:42:37.610Z","changeTime":"2020-09-11T02:55:05.058Z","relativeDirectory":"share/编程语言要素","absolutePath":"C:/Users/18754/ns/share/blog/share/编程语言要素/node.md"}}},"pageContext":{"slug":"/share/编程语言要素/node/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}