{"componentChunkName":"component---src-templates-blog-post-js","path":"/share/编程语言要素/golang/","result":{"data":{"markdownRemark":{"html":"<h1>import-package</h1>\n<ol>\n<li>每个文件中必须指明自己所属的包</li>\n<li>每个文件夹下只能有一个包</li>\n<li>import 语句 <code class=\"language-text\">m &quot;test-golang/foo&quot;</code> 绝对路径 <code class=\"language-text\">test-golang</code>是总的包名 在go.mod中定义 <code class=\"language-text\">/foo</code>是文件夹名 与包名无关 <code class=\"language-text\">m</code> 是此文件夹中存在的包的别名</li>\n<li>同一文件夹中(同一包)的不同文件中定义的符号 互相可见<br>\ngolang的一个repo由一个或者多个module组成 一个module由一个或多个package组成  package是一个文件夹下一个或多个go源文件, 在相同的package下符号定义互相共享(可以在一个go文件中直接使用定义在另一个go文件但是相同package的符号)\n一个repo 一般只含有一个module, module的定义文件是go.mod 其中声明了此module的 module path\n首字母大写的符号导出</li>\n</ol>\n<h1>忽略unused xx 报警</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">go run -gcflags <span class=\"token string\">'-unused_pkgs -unused_vars'</span> xx.go </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>dependency 依赖</h1>\n<p>go mod init xxx (you moudle path),所以一个正常的go的目录结构是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">you-project-dir\n    you-moude-dir\n        main.go\n    go.mod</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>go.mod 作用类似于package.json或者carg.yaml</p>\n<h2>l-function-args</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">func a(a1,a2 string) {\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>test <a href=\"https://golang.org/pkg/testing/\">test</a></h1>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> xxx\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"testing\"</span>\n\t<span class=\"token string\">\"github.com/stretchr/testify/assert\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestXXXX</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>文件名必须以_test 结尾</p>\n<p><code class=\"language-text\">go test xxx</code> xxx是包名字 可以用正则 <code class=\"language-text\">go test ./controller/*</code>\n<code class=\"language-text\">go test如xx -run TEST_NAME</code> 只测试特定的函数 只测试特定的函数 </p>\n<h3>如何避免cache</h3>\n<p>go test --count=1</p>\n<h3>如何输出log</h3>\n<p>go test -v  // --verbose go test 默认捕获输出.此外可以直接使用t.Logf(\")</p>\n<h2>变量定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    var a = &quot;initial&quot;\n    fmt.Println(a)\n\n    var b, c int = 1, 2\n    fmt.Println(b, c)\n\n    var d = true\n    fmt.Println(d)\n\n    var e int\n    fmt.Println(e)\n\n    f := &quot;apple&quot;\n    fmt.Println(f)\n}\n/*\n go run variables.go\ninitial\n1 2\ntrue\n0\napple\n*/</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>control statement</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    if 7%2 == 0 {\n        fmt.Println(&quot;7 is even&quot;)\n    } else {\n        fmt.Println(&quot;7 is odd&quot;)\n    }\n\n    if 8%4 == 0 {\n        fmt.Println(&quot;8 is divisible by 4&quot;)\n    }\n\n    if num := 9; num &lt; 0 {\n        fmt.Println(num, &quot;is negative&quot;)\n    } else if num &lt; 10 {\n        fmt.Println(num, &quot;has 1 digit&quot;)\n    } else {\n        fmt.Println(num, &quot;has multiple digits&quot;)\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>function-define</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">func FUNC_NAME(ARG1 ARG1_TYPE,ARG2 ARG2_TYPE) RET_TYPE {\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h1>l-string</h1>\n<h2>l-string-fmt</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">// https://golang.org/pkg/fmt/\n// golang 采用的是常规的模板方式 %X 一般常用的有%v 打印结构体 %+v 结构体+fieldname %d 数字 %s 字符串\ntitle := fmt.Sprintf(&quot;已采集%d个药草, 还需要%d个完成任务&quot;, progress, target)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>容器</h2>\n<h3>list</h3>\n<h4>push</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tvar s []int\n\tprintSlice(s)\n\n\t// append works on nil slices.\n\ts = append(s, 0)\n\tprintSlice(s)\n\n\t// The slice grows as needed.\n\ts = append(s, 1)\n\tprintSlice(s)\n\n\t// We can add more than one element at a time.\n\ts = append(s, 2, 3, 4)\n\tprintSlice(s)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>interface</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type INTERFACE_NAME interface {\n    FUNC_NAME(ARG) RET_TYPE\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>impl-interface</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\ntype Barkble interface {\n\tbark() string\n}\n\nfunc cal(b Barkble) {\n\tfmt.Printf(b.bark())\n}\n\ntype Dog1 struct {\n\tname string\n}\n\nfunc NewDog1() *Dog1 {\n\treturn &amp;Dog1{name: &quot;A&quot;}\n}\nfunc (d *Dog1) bark() string {\n\treturn d.name\n}\n\ntype Dog2 struct {\n\tname string\n}\n\nfunc NewDog2() *Dog2 {\n\treturn &amp;Dog2{name: &quot;B&quot;}\n}\nfunc (d *Dog2) bark() string {\n\treturn d.name\n}\n\nfunc main() {\n\tcal(NewDog1())\n\tcal(NewDog2())\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-struct</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type STRUCT_NAME struct {\n    FIELD_NAME FIELD_TYPE,\n    FIELD_NAME FIELD_TYPE,\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-construct-struct</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type Dog1 struct {\n\tname string\n}\nfunc a() {\n    d := Dog1 {\n        name:&quot;2&quot;}\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>要注意的是如果没有逗号，则}不能另起新行，否则会报错</p>\n<h2>l-struct-anonymous</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\"> []struct{ file, md5 string } </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h1>statement</h1>\n<h2>select</h2>\n<h3>loop</h3>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<h2>iterator</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">a := []string{&quot;Foo&quot;, &quot;Bar&quot;}\nfor i, s := range a {\n    fmt.Println(i, s)\n}\nm := map[string]int{\n    &quot;one&quot;:   1,\n    &quot;two&quot;:   2,\n    &quot;three&quot;: 3,\n}\nfor k, v := range m {\n    fmt.Println(k, v)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>common-container</h1>\n<h2>list</h2>\n<h2>array</h2>\n<h2>quque</h2>\n<h2>map</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\ntype A struct {\n\tm map[uint64]uint64\n}\n\nfunc main() {\n\tfmt.Println(&quot;Hello, playground&quot;)\n\ta := new(A)\n\ta.m = make(map[uint64]uint64)\n\ta.m[1] = 2\n\tfmt.Printf(&quot;%v&quot;, a)\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-array-access-syntax</h2>\n<p><a href=\"https://medium.com/golangspec/slice-expressions-in-go-963368c20765\">slice-expressions-in-go</a></p>\n<h3>l-array-range</h3>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\ta := []int{1, 2, 3, 4}\n\tb := a[0:1]\n\tfmt.Printf(&quot;%v\\n&quot;, a)\n\tfmt.Printf(&quot;%v\\n&quot;, b)\n\n}\n// [1 2 3 4]\n// [1]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>debug</h1>\n<p>更准确的说 是golang vscoe debug的配置</p>\n<p>go test -c 可以直接编译某个测试文件为binary</p>\n<h2>以某个测试为入口 debug</h2>\n<p><a href=\"https://github.com/microsoft/vscode-go/issues/318\"></a></p>\n<ol>\n<li>\n<p>配置vscode</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Launch\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"-test.v\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"-test.run\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"TestPing2\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"showLog\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>在测试文件中打上断点 点击debug</li>\n</ol>\n<h1>l-struct-</h1>\n<h1>l-struct-mixin</h1>\n<h2>define</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">type</span> A <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ta_name_1 <span class=\"token builtin\">string</span>\n\ta_name_2 <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> B <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tA\n\tb_name_1 <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// B  实际的field是 a_name_1 a_name_2 b_name_1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>init</h2>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> A<span class=\"token punctuation\">{</span>a_name_1<span class=\"token punctuation\">:</span> <span class=\"token string\">\"a_1\"</span><span class=\"token punctuation\">,</span> a_name_2<span class=\"token punctuation\">:</span> <span class=\"token string\">\"a_2\"</span><span class=\"token punctuation\">}</span>\nb1 <span class=\"token operator\">:=</span> B<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">}</span>\nb2 <span class=\"token operator\">:=</span> B<span class=\"token punctuation\">{</span>A<span class=\"token punctuation\">:</span>a<span class=\"token punctuation\">,</span>b_name_1<span class=\"token punctuation\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\\n\"</span><span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\\n\"</span><span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 要注意的是不能混用 field:value,value [source](https://github.com/Unknwon/go-fundamental-programming/issues/8)</span>\n<span class=\"token comment\">//[go-playground](https://play.golang.org/p/5BrRMGibttH)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>l-profile</h1>\n<p>go test  -cpuprofile cpu.prof -memprofile mem.prof\ngo tool pprof mem.prof\nweb</p>\n<h1>l-ffi</h1>\n<h2>调用c</h2>\n<h2>从c中读取</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"></span></pre></div>\n<p>检测空指针</p>\n<p><a href=\"\"></a></p>\n<h1>l-json</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">type response struct {\n    Page   int      `json:&quot;page&quot;`\n    Fruits []string `json:&quot;fruits&quot;`\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-type-from-json</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">res1D := &amp;response{\n    Page:   1,\n    Fruits: []string{&quot;apple&quot;, &quot;peach&quot;, &quot;pear&quot;}\n}\nres1B, _ := json.Marshal(res1D)\nfmt.Println(string(res1B))\n\n## 避免html字符转义\nhttps://blog.csdn.net/LinHenk/article/details/89636192</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">str := `{&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]}`\nres := response{}\njson.Unmarshal([]byte(str), &amp;res)\nfmt.Println(res)\nfmt.Println(res.Fruits[0])</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>l-assert-json-stringl--eq</h2>\n<p><a href=\"https://gist.github.com/turtlemonvh/e4f7404e28387fadb8ad275a99596f67\"></a></p>\n<h1>l-ffi</h1>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token keyword\">int</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>OutBuffer<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">&amp;</span>OutLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>InBuffer<span class=\"token punctuation\">,</span> size_t InLen<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>OutBuffer<span class=\"token punctuation\">,</span> InBuffer<span class=\"token punctuation\">,</span> InLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>l-call-ffi-dynmaic</h3>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-golang line-numbers\"><code class=\"language-golang\">package main\n\n\nfunc main() {\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>l-call-ffi-static</h3>\n<h4>windows</h4>\n<p>golang windows 静态链接很麻烦 放弃吧 用动态链接</p>\n<h4>linux</h4>\n<h2>l-been-ffi</h2>\n<p>必须能够变成动态或者静态的c库</p>\n<h3>l-been-ffi-dynmaic</h3>\n<h3>l-been-ffi-static</h3>","fields":{"slug":"/share/编程语言要素/golang/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"kln7cuv","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"golang","ext":".md","birthTime":"2020-06-08T14:42:38.173Z","changeTime":"2020-08-22T10:21:27.075Z","relativeDirectory":"share/编程语言要素","absolutePath":"C:/Users/18754/ns/share/blog/share/编程语言要素/golang.md"}}},"pageContext":{"slug":"/share/编程语言要素/golang/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}