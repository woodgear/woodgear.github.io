{"componentChunkName":"component---src-templates-blog-post-js","path":"/cube/windows-process/","result":{"data":{"markdownRemark":{"html":"<p>实现一个函数\n输入 命令行\n输出 此命令行的执行结果</p>\n<h1>c++</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BUFSIZE <span class=\"token number\">4096</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">GetLastErrorAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Get the error message, if any.</span>\n    DWORD errorMessageID <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorMessageID <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//No error message has been recorded</span>\n\n    LPSTR messageBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    size_t size <span class=\"token operator\">=</span> <span class=\"token function\">FormatMessageA</span><span class=\"token punctuation\">(</span>FORMAT_MESSAGE_ALLOCATE_BUFFER <span class=\"token operator\">|</span> FORMAT_MESSAGE_FROM_SYSTEM <span class=\"token operator\">|</span> FORMAT_MESSAGE_IGNORE_INSERTS<span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> errorMessageID<span class=\"token punctuation\">,</span> <span class=\"token function\">MAKELANGID</span><span class=\"token punctuation\">(</span>LANG_NEUTRAL<span class=\"token punctuation\">,</span> SUBLANG_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPSTR<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>messageBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>messageBuffer<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Free the buffer.</span>\n    <span class=\"token function\">LocalFree</span><span class=\"token punctuation\">(</span>messageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>string cmd<span class=\"token punctuation\">,</span> string <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SECURITY_ATTRIBUTES saAttr<span class=\"token punctuation\">;</span>\n    saAttr<span class=\"token punctuation\">.</span>nLength <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SECURITY_ATTRIBUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    saAttr<span class=\"token punctuation\">.</span>bInheritHandle <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span>\n    saAttr<span class=\"token punctuation\">.</span>lpSecurityDescriptor <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    HANDLE read <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    HANDLE write <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//when process write in 'write' you could read from 'read'</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreatePipe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>read<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>write<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>saAttr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span><span class=\"token string\">\"CreatePipe Err\"</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//init PROCESS_INFORMATION</span>\n    PROCESS_INFORMATION piProcInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>piProcInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESS_INFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//init STARTUPINFO set output handle of process</span>\n    STARTUPINFOA siStartInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>siStartInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STARTUPINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    siStartInfo<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>STARTUPINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    siStartInfo<span class=\"token punctuation\">.</span>hStdOutput <span class=\"token operator\">=</span> write<span class=\"token punctuation\">;</span>\n    siStartInfo<span class=\"token punctuation\">.</span>dwFlags <span class=\"token operator\">|=</span> STARTF_USESTDHANDLES<span class=\"token punctuation\">;</span>\n\n    BOOL bSuccess <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span>\n    bSuccess <span class=\"token operator\">=</span> <span class=\"token function\">CreateProcessA</span><span class=\"token punctuation\">(</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>LPSTR<span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// command line</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// process security attributes</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// primary thread security attributes</span>\n        TRUE<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// handles are inherited</span>\n        CREATE_NO_WINDOW<span class=\"token punctuation\">,</span><span class=\"token comment\">// creation flags</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// use parent's environment</span>\n        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// use parent's current directory</span>\n        <span class=\"token operator\">&amp;</span>siStartInfo<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// STARTUPINFO pointer</span>\n        <span class=\"token operator\">&amp;</span>piProcInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// receives PROCESS_INFORMATION</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bSuccess<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        res<span class=\"token operator\">=</span> <span class=\"token function\">GetLastErrorAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>piProcInfo<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>piProcInfo<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//now we can read the output of process</span>\n    DWORD dwRead<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> chBuf<span class=\"token punctuation\">[</span>BUFSIZE <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    stringstream ss<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">,</span> chBuf<span class=\"token punctuation\">,</span> BUFSIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            chBuf<span class=\"token punctuation\">[</span>dwRead<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n            ss <span class=\"token operator\">&lt;&lt;</span> chBuf<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    res <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string cmd <span class=\"token operator\">=</span> <span class=\"token string\">\"cmd /C echo test\"</span><span class=\"token punctuation\">;</span>\n    string res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"eval \"</span> <span class=\"token operator\">&lt;&lt;</span> cmd <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" ok\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"eval \"</span> <span class=\"token operator\">&lt;&lt;</span> cmd <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" fail\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1>Rust</h1>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token comment\">// power by https://github.com/hniksic/rust-subprocess.git</span>\n<span class=\"token comment\">/*\n[target.'cfg(windows)'.dependencies]\nwinapi = \"0.2\"\nkernel32-sys = \"0.2\"\n*/</span>\n\n<span class=\"token attribute attr-name\">#[cfg(windows)]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">kernel32</span><span class=\"token punctuation\">;</span>\n<span class=\"token attribute attr-name\">#[cfg(windows)]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">winapi</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">OsStr</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>os<span class=\"token punctuation\">::</span>windows<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">OsStrExt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>iter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>ptr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>mem<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OsStr to zero-terminated owned vector</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">to_nullterm</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">OsStr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u16</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">encode_wide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">iter<span class=\"token punctuation\">::</span></span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token number\">0u16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">create_process</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">winapi<span class=\"token punctuation\">::</span>minwinbase<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token constant\">LPSECURITY_ATTRIBUTES</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SECURITY_ATTRIBUTES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">winapi<span class=\"token punctuation\">::</span>winbase<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token constant\">CREATE_NO_WINDOW</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STARTF_USESTDHANDLES</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">winapi<span class=\"token punctuation\">::</span>minwindef<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token constant\">BOOL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DWORD</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">winapi<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token constant\">PROCESS_INFORMATION</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STARTUPINFOW</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">winapi<span class=\"token punctuation\">::</span>winnt<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PHANDLE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>os<span class=\"token punctuation\">::</span>windows<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">AsRawHandle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FromRawHandle</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">OsStr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> attributes <span class=\"token operator\">=</span> <span class=\"token constant\">SECURITY_ATTRIBUTES</span> <span class=\"token punctuation\">{</span>\n        nLength<span class=\"token punctuation\">:</span> <span class=\"token namespace\">mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">SECURITY_ATTRIBUTES</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">DWORD</span><span class=\"token punctuation\">,</span>\n        lpSecurityDescriptor<span class=\"token punctuation\">:</span> <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        bInheritHandle<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">BOOL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">mut</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">kernel32<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CreatePipe</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> r <span class=\"token keyword\">as</span> <span class=\"token constant\">PHANDLE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> w <span class=\"token keyword\">as</span> <span class=\"token constant\">PHANDLE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> attributes <span class=\"token keyword\">as</span> <span class=\"token constant\">LPSECURITY_ATTRIBUTES</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> read<span class=\"token punctuation\">,</span> write<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_raw_handle</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_raw_handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sinfo<span class=\"token punctuation\">:</span> <span class=\"token constant\">STARTUPINFOW</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token namespace\">mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">zeroed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    sinfo<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token namespace\">mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">size_of</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">STARTUPINFOW</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">DWORD</span><span class=\"token punctuation\">;</span>\n    sinfo<span class=\"token punctuation\">.</span>hStdOutput <span class=\"token operator\">=</span> write<span class=\"token punctuation\">.</span><span class=\"token function\">as_raw_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sinfo<span class=\"token punctuation\">.</span>dwFlags <span class=\"token operator\">=</span> <span class=\"token constant\">STARTF_USESTDHANDLES</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> cmd_line <span class=\"token operator\">=</span> <span class=\"token class-name\">OsStr</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> pinfo<span class=\"token punctuation\">:</span> <span class=\"token constant\">PROCESS_INFORMATION</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span> <span class=\"token namespace\">mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">zeroed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">kernel32<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CreateProcessW</span><span class=\"token punctuation\">(</span>\n            <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">to_nullterm</span><span class=\"token punctuation\">(</span>cmd_line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// lpProcessAttributes</span>\n            <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// lpThreadAttributes</span>\n            <span class=\"token boolean\">true</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">BOOL</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// bInheritHandles</span>\n            <span class=\"token constant\">CREATE_NO_WINDOW</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// dwCreationFlags</span>\n            <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// lpEnvironment</span>\n            <span class=\"token namespace\">ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// lpCurrentDirectory</span>\n            <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> sinfo<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> pinfo<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">kernel32<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CloseHandle</span><span class=\"token punctuation\">(</span>write<span class=\"token punctuation\">.</span><span class=\"token function\">as_raw_handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">kernel32<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CloseHandle</span><span class=\"token punctuation\">(</span>pinfo<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token namespace\">kernel32<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CloseHandle</span><span class=\"token punctuation\">(</span>pinfo<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contents <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    read<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_end</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map_err</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span>e<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_utf8</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map_err</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_create_process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">create_process</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd /c echo {}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\\r\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","fields":{"slug":"/cube/windows-process/","disqus":{"shortname":"woodgear-blog"}},"frontmatter":{"id":"pbwuuw2","time":"1996-09-08T23:37:07+08:00","tag":null},"parent":{"__typename":"File","name":"windows-process","ext":".md","birthTime":"2020-03-21T15:26:02.348Z","changeTime":"2020-08-17T01:18:38.450Z","relativeDirectory":"cube","absolutePath":"C:/Users/18754/ns/share/blog/cube/windows-process.md"}}},"pageContext":{"slug":"/cube/windows-process/","disqus":{"shortname":"woodgear-blog"}}},"staticQueryHashes":["68354608"]}