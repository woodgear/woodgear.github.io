{"componentChunkName":"component---src-templates-blog-post-js","path":"/cube/regex/","result":{"data":{"markdownRemark":{"html":"<h1>not space</h1>\n<p><sup id=\"fnref-\\s\"><a href=\"#fn-\\s\" class=\"footnote-ref\">\\s</a></sup></p>\n<h1>regex online</h1>\n<p><a href=\"https://regex101.com/\">regex101</a></p>\n<h1>非某个单词</h1>\n<p><a href=\"https://www.cnblogs.com/wangqiguo/archive/2012/05/08/2486548.html\">利用正则表达式排除特定字符串</a></p>\n<blockquote>\n<p>正则：^(?!baidu).<em>$  匹配结果就是第2行，也就是第1行被排除了\n这里使用了零宽度断言(?!exp),注意，我们有一个向前查找的语法(也叫顺序环视)  (?=exp)\n(?=exp) 会查找exp之前的【位置】如果将等号换成感叹号，就变成了否定语义，也就是说查找的位置的后面不能是exp\n一般情况下?!要与特定的锚点相结合，例如^行开头或者$行结尾，那么上面的例子的意思如下：\n^(?!baidu).</em>$ 先匹配一个行开头的位置，并且要求接下来的位置的后面不是baidu这个字符串。这样由于第一行^之后的位置后面是baidu所以匹配失败，被排除在外了。</p>\n</blockquote>\n<p><a href=\"https://regex101.com/r/SoP7B4/1\">online-demo</a></p>\n<h1>or</h1>\n<div class=\"gatsby-highlight\" data-language=\"regex\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-regex line-numbers\"><code class=\"language-regex\"><span class=\"token group\">(</span>aaaa<span class=\"token alternation\">|</span>bbbbb<span class=\"token group\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><a href=\"https://regex101.com/r/NF4LZX/1\">online-demo</a></p>"}},"pageContext":{"slug":"/cube/regex/"}}}